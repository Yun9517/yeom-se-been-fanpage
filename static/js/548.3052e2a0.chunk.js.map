{"version":3,"file":"static/js/548.3052e2a0.chunk.js","mappings":"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","sources":["hooks/useFirestoreCollection.js","components/ChatRoom.js","hooks/useUserProfile.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { collection, query, getDocs, onSnapshot } from 'firebase/firestore';\nimport { db } from '../firebase'; // 假設你的 firebase.js 導出了 db\n\nconst useFirestoreCollection = (collectionName, queryConstraints = [], liveUpdate = false) => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    setError(null); // Clear previous errors\n\n    const collectionRef = collection(db, collectionName);\n    let q = query(collectionRef, ...queryConstraints); // 應用傳入的查詢約束\n\n    const fetchData = async () => {\n      try {\n        const querySnapshot = await getDocs(q);\n        const fetchedData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setData(fetchedData);\n        console.log(`useFirestoreCollection: Fetched data from ${collectionName}.`);\n      } catch (err) {\n        console.error(`useFirestoreCollection: Error fetching data from ${collectionName}:`, err);\n        setError(`無法載入 ${collectionName} 資料，請稍後再試。`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    const setupLiveListener = () => {\n      const unsubscribe = onSnapshot(q, (querySnapshot) => {\n        const fetchedData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setData(fetchedData);\n        setLoading(false);\n        setError(null);\n        console.log(`useFirestoreCollection: Live update from ${collectionName}.`);\n      }, (err) => {\n        console.error(`useFirestoreCollection: Live update error for ${collectionName}:`, err);\n        setError(`即時更新 ${collectionName} 資料失敗。`);\n        setLoading(false);\n      });\n      return unsubscribe;\n    };\n\n    let unsubscribe = null;\n    if (liveUpdate) {\n      unsubscribe = setupLiveListener();\n    } else {\n      fetchData();\n    }\n\n    // Cleanup function for useEffect\n    return () => {\n      if (unsubscribe) {\n        unsubscribe(); // Unsubscribe from live listener if it was set up\n      }\n    };\n  }, [collectionName, queryConstraints, liveUpdate]); // 依賴項，當這些改變時重新執行 effect\n\n  return { data, loading, error };\n};\n\nexport default useFirestoreCollection;\n","import React, { useState, useEffect, useRef, useMemo, useLayoutEffect } from 'react';\r\nimport { Container, Form, Button, ListGroup, Spinner, Alert, Badge, Modal } from 'react-bootstrap';\r\nimport { IoClose } from 'react-icons/io5';\r\nimport EmojiPicker from 'emoji-picker-react';\r\nimport { useUser } from '../context/UserContext';\r\nimport { useUserProfile } from '../hooks/useUserProfile';\r\nimport LoadingSpinner from './LoadingSpinner'; // Import LoadingSpinner\r\nimport useFirestoreCollection from '../hooks/useFirestoreCollection';\r\nimport { collection, addDoc, serverTimestamp, orderBy, limit, doc, updateDoc, getDoc } from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\nimport './ChatRoom.css';\r\n\r\nconst RETRACT_TIME_LIMIT = 5 * 60 * 1000; // 5 minutes in milliseconds\r\n\r\nconst ChatRoom = () => {\r\n  const { user, authLoading, loading } = useUser();\r\n  const { \r\n    updateUserProfile, \r\n    resetToInitialNickname, \r\n    isUpdating: isUpdatingNickname, \r\n    error: nicknameUpdateError, \r\n    setError: setNicknameUpdateError \r\n  } = useUserProfile();\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [showInputPicker, setShowInputPicker] = useState(false);\r\n  const [hoveredMessageId, setHoveredMessageId] = useState(null);\r\n  const [activeReactionPickerId, setActiveReactionPickerId] = useState(null);\r\n  const messagesEndRef = useRef(null);\r\n  const messagesAreaRef = useRef(null);\r\n  const emojiPickerRef = useRef(null); // Ref for emoji picker container\r\n  const reactionToggleButtonRef = useRef(null); // Ref for the reaction toggle button\r\n\r\n  const [showNicknameModal, setShowNicknameModal] = useState(false);\r\n  const [newNickname, setNewNickname] = useState(user?.displayName || '');\r\n\r\n  const commonEmojis = ['👍', '😲', '🥺'];\r\n\r\n  const messagesQueryConstraints = useMemo(() => [orderBy('createdAt', 'desc'), limit(100)], []);\r\n  const { data: messages, loading: messagesLoading, error } = useFirestoreCollection('messages', messagesQueryConstraints, true);\r\n  const prevMessagesCountRef = useRef(messages.length);\r\n\r\n  const sortedMessages = useMemo(() => messages.slice().reverse(), [messages]);\r\n\r\n  const onInputEmojiClick = (emojiObject) => {\r\n    setNewMessage(prevInput => prevInput + emojiObject.emoji);\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    const messagesArea = messagesAreaRef.current;\r\n    if (!messagesArea) return;\r\n\r\n    // Only scroll to bottom if a new message has been added\r\n    if (messages.length > prevMessagesCountRef.current) {\r\n      scrollToBottom();\r\n    }\r\n\r\n    // Update the ref to the current message count for the next render\r\n    prevMessagesCountRef.current = messages.length;\r\n  }, [messages, messages.length]);\r\n\r\n  useEffect(() => {\r\n    if (messagesAreaRef.current) {\r\n      messagesAreaRef.current.scrollTop = messagesAreaRef.current.scrollHeight;\r\n    }\r\n  }, [messagesLoading]);\r\n\r\n  // Effect to handle click outside for closing emoji picker\r\n  useEffect(() => {\r\n    function handleClickOutside(event) {\r\n      if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target) &&\r\n          reactionToggleButtonRef.current && !reactionToggleButtonRef.current.contains(event.target)) {\r\n        setActiveReactionPickerId(null);\r\n      }\r\n    }\r\n\r\n    if (activeReactionPickerId) {\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [activeReactionPickerId]);\r\n\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (newMessage.trim() === '' || !user) return;\r\n\r\n    try {\r\n      await addDoc(collection(db, 'messages'), {\r\n        text: newMessage,\r\n        createdAt: serverTimestamp(),\r\n        userId: user.uid,\r\n        userName: user.displayName || '匿名用戶',\r\n        isRetracted: false,\r\n        reactions: {}, // Ensure reactions field is created\r\n      });\r\n      setNewMessage('');\r\n      scrollToBottom(); // Force scroll to bottom after sending a message\r\n    } catch (err) {\r\n      console.error(\"Error sending message:\", err);\r\n    }\r\n  };\r\n\r\n  const handleRetractMessage = async (messageId) => {\r\n    const messageRef = doc(db, 'messages', messageId);\r\n    try {\r\n      await updateDoc(messageRef, { isRetracted: true });\r\n    } catch (err) {\r\n      console.error(\"Error retracting message:\", err);\r\n    }\r\n  };\r\n\r\n  const handleReaction = async (messageId, emoji) => {\r\n    if (!user) return;\r\n    const messageRef = doc(db, 'messages', messageId);\r\n\r\n    try {\r\n      const docSnap = await getDoc(messageRef);\r\n      if (docSnap.exists()) {\r\n        const messageData = docSnap.data();\r\n        const reactions = messageData.reactions || {};\r\n        const reactionUsers = reactions[emoji] || [];\r\n\r\n        if (reactionUsers.includes(user.uid)) {\r\n          reactions[emoji] = reactionUsers.filter(id => id !== user.uid);\r\n          if (reactions[emoji].length === 0) {\r\n            delete reactions[emoji];\r\n          }\r\n        } else {\r\n          reactions[emoji] = [...reactionUsers, user.uid];\r\n        }\r\n\r\n        await updateDoc(messageRef, { reactions });\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error handling reaction:\", err);\r\n    }\r\n    setActiveReactionPickerId(null);\r\n  };\r\n\r\n  const handleUpdateNickname = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await updateUserProfile(newNickname);\r\n      setShowNicknameModal(false);\r\n    } catch (err) {\r\n      // Error is already set in the hook, just log it\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const handleResetNickname = async () => {\r\n    try {\r\n      await resetToInitialNickname();\r\n      setShowNicknameModal(false);\r\n    } catch (err) {\r\n      // Error is already set in the hook, just log it\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  if (authLoading) {\r\n    return (\r\n      <Container className=\"mt-5 text-center\">\r\n        <LoadingSpinner />\r\n        <p className=\"mt-3\">載入使用者狀態...</p>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  if (!user) {\r\n    return (\r\n      <Container className=\"mt-5\">\r\n        <Alert variant=\"warning\">請先登入才能使用聊天室。</Alert>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container className=\"mt-5 chat-container\">\r\n      <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n        <h2 className=\"mb-0\">粉絲聊天室</h2>\r\n        {user && !user.isAnonymous && (\r\n          <Button variant=\"outline-info\" size=\"sm\" onClick={() => {\r\n            setNewNickname(user.displayName || '');\r\n            setNicknameUpdateError(null); // Clear previous errors\r\n            setShowNicknameModal(true);\r\n          }}>\r\n            修改暱稱\r\n          </Button>\r\n        )}\r\n      </div>\r\n      <div className=\"messages-area\" ref={messagesAreaRef}>\r\n        {loading && <Spinner animation=\"border\" />}\r\n        {error && <Alert variant=\"danger\">無法載入訊息：{error.message}</Alert>}\r\n        <ListGroup>\r\n          {sortedMessages.map((msg) => (\r\n            <ListGroup.Item\r\n              key={msg.id}\r\n              className={`message-item ${msg.userId === user.uid ? 'sent' : 'received'}`}\r\n              onMouseEnter={() => setHoveredMessageId(msg.id)}\r\n              onMouseLeave={() => setHoveredMessageId(null)}\r\n            >\r\n              <div className=\"message-content\">\r\n                {msg.isRetracted ? (\r\n                  <em className=\"retracted-message\">訊息已收回</em>\r\n                ) : (\r\n                  <>\r\n                    <strong className=\"message-user\">{msg.userName}</strong>\r\n                    <div className=\"message-text\">{msg.text}</div>\r\n                    <small className=\"message-time\">\r\n                      {msg.createdAt?.toDate().toLocaleTimeString()}\r\n                    </small>\r\n                    \r\n                    <div className={`message-toolbar ${msg.userId === user.uid ? 'sent' : 'received'}`}>\r\n                      {(hoveredMessageId === msg.id || activeReactionPickerId === msg.id) && (\r\n                        <>\r\n                          <Button variant=\"link\" className=\"reaction-button\" onClick={() => setActiveReactionPickerId(activeReactionPickerId === msg.id ? null : msg.id)} ref={reactionToggleButtonRef}>...</Button>\r\n                          {msg.userId === user.uid && (Date.now() - msg.createdAt?.toDate().getTime() < RETRACT_TIME_LIMIT) && (\r\n                            <Button variant=\"link\" className=\"retract-button\" onClick={() => handleRetractMessage(msg.id)}>收回</Button>\r\n                          )}\r\n                        </>\r\n                      )}\r\n                    </div>\r\n\r\n                    {hoveredMessageId === msg.id && (\r\n                      <div className={`quick-reactions-container ${msg.userId === user.uid ? 'sent' : 'received'}`}>\r\n                        {commonEmojis.map(emoji => (\r\n                          <Button \r\n                            key={emoji} \r\n                            variant=\"link\" \r\n                            className=\"quick-reaction-button\"\r\n                            onClick={() => handleReaction(msg.id, emoji)}\r\n                          >\r\n                            {emoji}\r\n                          </Button>\r\n                        ))}\r\n                      </div>\r\n                    )}\r\n\r\n                    {activeReactionPickerId === msg.id && (\r\n                      <div className={`picker-container-absolute ${msg.userId === user.uid ? 'sent-picker' : 'received-picker'}`} ref={emojiPickerRef}> {/* Add ref here */}\r\n                        <EmojiPicker\r\n                          onEmojiClick={(e) => handleReaction(msg.id, e.emoji)}\r\n                          height={350}\r\n                          width={250}\r\n                          className=\"reaction-emoji-picker\"\r\n                        />\r\n                      </div>\r\n                    )}\r\n\r\n                    <div className=\"reactions-display\">\r\n                      {Object.entries(msg.reactions || {}).map(([emoji, users]) => (\r\n                        users.length > 0 && (\r\n                          <Badge \r\n                            key={emoji} \r\n                            pill \r\n                            bg={users.includes(user.uid) ? \"primary\" : \"secondary\"}\r\n                            className=\"reaction-badge\"\r\n                            onClick={() => handleReaction(msg.id, emoji)}\r\n                          >\r\n                            {emoji} {users.length}\r\n                          </Badge>\r\n                        )\r\n                      ))}\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            </ListGroup.Item>\r\n          ))}\r\n          <div ref={messagesEndRef} />\r\n        </ListGroup>\r\n      </div>\r\n      <div className=\"input-picker-container\">\r\n        {showInputPicker && (\r\n          <>\r\n            <EmojiPicker onEmojiClick={onInputEmojiClick} />\r\n            <Button variant=\"secondary\" onClick={() => setShowInputPicker(false)} className=\"mt-2 emoji-close-button\">\r\n              <IoClose />\r\n            </Button>\r\n          </>\r\n        )}\r\n      </div>\r\n      <Form onSubmit={handleSendMessage} className=\"message-form\">\r\n        <Form.Control\r\n          type=\"text\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          placeholder=\"輸入訊息...\"\r\n          autoComplete=\"off\"\r\n        />\r\n        <Button variant=\"light\" onClick={() => setShowInputPicker(val => !val)} className=\"emoji-button\">😊</Button>\r\n        <Button variant=\"primary\" type=\"submit\" className=\"btn-theme-gradient\">\r\n          傳送\r\n        </Button>\r\n      </Form>\r\n\r\n      {/* Nickname Edit Modal */}\r\n      <Modal show={showNicknameModal} onHide={() => setShowNicknameModal(false)} centered dialogClassName=\"nickname-modal\">\r\n        <Modal.Header className=\"bg-dark text-white\">\r\n          <Modal.Title>修改聊天室暱稱</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"bg-dark text-white\">\r\n          <Form onSubmit={handleUpdateNickname}>\r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Label>新暱稱</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"輸入新暱稱\"\r\n                value={newNickname}\r\n                onChange={(e) => setNewNickname(e.target.value)}\r\n                isInvalid={!!nicknameUpdateError}\r\n                disabled={isUpdatingNickname}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {nicknameUpdateError?.message}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <div className=\"d-flex justify-content-end\">\r\n              <Button variant=\"secondary\" onClick={() => setShowNicknameModal(false)} disabled={isUpdatingNickname} className=\"me-2\">\r\n                取消\r\n              </Button>\r\n              <Button variant=\"outline-warning\" onClick={handleResetNickname} disabled={isUpdatingNickname || loading} className=\"me-2\">\r\n                初始暱稱\r\n              </Button>\r\n              <Button variant=\"primary\" type=\"submit\" disabled={isUpdatingNickname}>\r\n                {isUpdatingNickname ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> : '儲存變更'}\r\n              </Button>\r\n            </div>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n","import { useState, useCallback } from 'react';\nimport { auth, db } from '../firebase';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { updateProfile } from 'firebase/auth';\nimport { useUser } from '../context/UserContext';\n\nexport const useUserProfile = () => {\n  const { user, userAchievements, fetchUserData } = useUser();\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [error, setError] = useState(null);\n\n  const updateUserProfile = useCallback(async (newDisplayName) => {\n    if (!user || user.isAnonymous) {\n      const err = new Error(\"未登入或匿名用戶無法修改暱稱。\");\n      setError(err);\n      throw err;\n    }\n    if (!newDisplayName || newDisplayName.trim() === '') {\n      const err = new Error(\"暱稱不能為空。\");\n      setError(err);\n      throw err;\n    }\n\n    setIsUpdating(true);\n    setError(null);\n\n    try {\n      await updateProfile(auth.currentUser, {\n        displayName: newDisplayName.trim()\n      });\n\n      const userDocRef = doc(db, 'userAchievements', user.uid);\n      await setDoc(userDocRef, { userName: newDisplayName.trim() }, { merge: true });\n\n      await fetchUserData();\n\n      setIsUpdating(false);\n      return { success: true };\n    } catch (e) {\n      console.error(\"Error updating user profile:\", e);\n      const err = new Error(\"更新暱稱失敗，請稍後再試。\");\n      setError(err);\n      setIsUpdating(false);\n      throw err;\n    }\n  }, [user, fetchUserData]);\n\n  const resetToInitialNickname = useCallback(async () => {\n    if (!user || user.isAnonymous) {\n      const err = new Error(\"未登入或匿名用戶無法重設暱稱。\");\n      setError(err);\n      throw err;\n    }\n    if (!userAchievements || !userAchievements.initialDisplayName) {\n      const err = new Error(\"無法取得初始暱稱。\");\n      setError(err);\n      throw err;\n    }\n\n    // No need to set loading/error state here as it's handled by updateUserProfile\n    try {\n      await updateUserProfile(userAchievements.initialDisplayName);\n      return { success: true };\n    } catch (e) {\n      // Error is already set by the updateUserProfile call\n      console.error(\"Error resetting nickname:\", e);\n      throw new Error(\"重設暱稱失敗，請稍後再試。\");\n    }\n  }, [user, userAchievements, updateUserProfile]);\n\n  return {\n    updateUserProfile,\n    resetToInitialNickname,\n    isUpdating,\n    error,\n    setError, // Expose setError to allow clearing it from the component\n  };\n};"],"names":["collectionName","queryConstraints","arguments","length","undefined","liveUpdate","data","setData","useState","loading","setLoading","error","setError","useEffect","collectionRef","collection","db","q","query","unsubscribe","onSnapshot","querySnapshot","fetchedData","docs","map","doc","id","console","log","err","async","getDocs","fetchData","ChatRoom","user","authLoading","useUser","updateUserProfile","resetToInitialNickname","isUpdating","isUpdatingNickname","nicknameUpdateError","setNicknameUpdateError","useUserProfile","userAchievements","fetchUserData","setIsUpdating","useCallback","isAnonymous","Error","newDisplayName","trim","updateProfile","auth","currentUser","displayName","userDocRef","uid","setDoc","userName","merge","success","e","initialDisplayName","newMessage","setNewMessage","showInputPicker","setShowInputPicker","hoveredMessageId","setHoveredMessageId","activeReactionPickerId","setActiveReactionPickerId","messagesEndRef","useRef","messagesAreaRef","emojiPickerRef","reactionToggleButtonRef","showNicknameModal","setShowNicknameModal","newNickname","setNewNickname","commonEmojis","messagesQueryConstraints","useMemo","orderBy","limit","messages","messagesLoading","useFirestoreCollection","prevMessagesCountRef","sortedMessages","slice","reverse","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","useLayoutEffect","scrollTop","scrollHeight","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","handleReaction","messageId","emoji","messageRef","docSnap","getDoc","exists","reactions","reactionUsers","includes","filter","updateDoc","_jsxs","Container","className","children","_jsx","LoadingSpinner","Button","variant","size","onClick","ref","Spinner","animation","Alert","message","ListGroup","msg","_msg$createdAt","_msg$createdAt2","Item","userId","onMouseEnter","onMouseLeave","isRetracted","_Fragment","text","createdAt","toDate","toLocaleTimeString","Date","now","getTime","handleRetractMessage","EmojiPicker","onEmojiClick","height","width","Object","entries","_ref","users","Badge","pill","bg","emojiObject","prevInput","IoClose","Form","onSubmit","preventDefault","addDoc","serverTimestamp","Control","type","value","onChange","placeholder","autoComplete","val","Modal","show","onHide","centered","dialogClassName","Header","Title","Body","Group","Label","isInvalid","disabled","Feedback","as","role"],"sourceRoot":""}