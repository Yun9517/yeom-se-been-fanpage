{"version":3,"file":"static/js/325.a12f9ec1.chunk.js","mappings":"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","sources":["hooks/useFirestoreCollection.js","components/ChatRoom.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { collection, query, getDocs, onSnapshot } from 'firebase/firestore';\nimport { db } from '../firebase'; // 假設你的 firebase.js 導出了 db\n\nconst useFirestoreCollection = (collectionName, queryConstraints = [], liveUpdate = false) => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    setError(null); // Clear previous errors\n\n    const collectionRef = collection(db, collectionName);\n    let q = query(collectionRef, ...queryConstraints); // 應用傳入的查詢約束\n\n    const fetchData = async () => {\n      try {\n        const querySnapshot = await getDocs(q);\n        const fetchedData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setData(fetchedData);\n        console.log(`useFirestoreCollection: Fetched data from ${collectionName}.`);\n      } catch (err) {\n        console.error(`useFirestoreCollection: Error fetching data from ${collectionName}:`, err);\n        setError(`無法載入 ${collectionName} 資料，請稍後再試。`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    const setupLiveListener = () => {\n      const unsubscribe = onSnapshot(q, (querySnapshot) => {\n        const fetchedData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setData(fetchedData);\n        setLoading(false);\n        setError(null);\n        console.log(`useFirestoreCollection: Live update from ${collectionName}.`);\n      }, (err) => {\n        console.error(`useFirestoreCollection: Live update error for ${collectionName}:`, err);\n        setError(`即時更新 ${collectionName} 資料失敗。`);\n        setLoading(false);\n      });\n      return unsubscribe;\n    };\n\n    let unsubscribe = null;\n    if (liveUpdate) {\n      unsubscribe = setupLiveListener();\n    } else {\n      fetchData();\n    }\n\n    // Cleanup function for useEffect\n    return () => {\n      if (unsubscribe) {\n        unsubscribe(); // Unsubscribe from live listener if it was set up\n      }\n    };\n  }, [collectionName, queryConstraints, liveUpdate]); // 依賴項，當這些改變時重新執行 effect\n\n  return { data, loading, error };\n};\n\nexport default useFirestoreCollection;\n","import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { Container, Form, Button, ListGroup, Spinner, Alert, Badge } from 'react-bootstrap';\nimport { IoClose } from 'react-icons/io5';\nimport EmojiPicker from 'emoji-picker-react';\nimport { useUser } from '../context/UserContext';\nimport LoadingSpinner from './LoadingSpinner'; // Import LoadingSpinner\nimport useFirestoreCollection from '../hooks/useFirestoreCollection';\nimport { collection, addDoc, serverTimestamp, orderBy, limit, doc, updateDoc, getDoc } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport './ChatRoom.css';\n\nconst RETRACT_TIME_LIMIT = 5 * 60 * 1000; // 5 minutes in milliseconds\n\nconst ChatRoom = () => {\n  const { user, authLoading } = useUser();\n  const [newMessage, setNewMessage] = useState('');\n  const [showInputPicker, setShowInputPicker] = useState(false);\n  const [hoveredMessageId, setHoveredMessageId] = useState(null);\n  const [activeReactionPickerId, setActiveReactionPickerId] = useState(null);\n  const messagesEndRef = useRef(null);\n  const messagesAreaRef = useRef(null);\n  const emojiPickerRef = useRef(null); // Ref for emoji picker container\n  const reactionToggleButtonRef = useRef(null); // Ref for the reaction toggle button\n\n  const commonEmojis = ['👍', '😲', '🥺'];\n\n  const messagesQueryConstraints = useMemo(() => [orderBy('createdAt', 'desc'), limit(100)], []);\n  const { data: messages, loading, error } = useFirestoreCollection('messages', messagesQueryConstraints, true);\n\n  const sortedMessages = useMemo(() => messages.slice().reverse(), [messages]);\n\n  const onInputEmojiClick = (emojiObject) => {\n    setNewMessage(prevInput => prevInput + emojiObject.emoji);\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [sortedMessages]);\n\n  useEffect(() => {\n    if (messagesAreaRef.current) {\n      messagesAreaRef.current.scrollTop = messagesAreaRef.current.scrollHeight;\n    }\n  }, [loading]);\n\n  // Effect to handle click outside for closing emoji picker\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target) &&\n          reactionToggleButtonRef.current && !reactionToggleButtonRef.current.contains(event.target)) {\n        setActiveReactionPickerId(null);\n      }\n    }\n\n    if (activeReactionPickerId) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [activeReactionPickerId]);\n\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n    if (newMessage.trim() === '' || !user) return;\n\n    try {\n      await addDoc(collection(db, 'messages'), {\n        text: newMessage,\n        createdAt: serverTimestamp(),\n        userId: user.uid,\n        userName: user.displayName || '匿名用戶',\n        isRetracted: false,\n        reactions: {}, // Ensure reactions field is created\n      });\n      setNewMessage('');\n    } catch (err) {\n      console.error(\"Error sending message:\", err);\n    }\n  };\n\n  const handleRetractMessage = async (messageId) => {\n    const messageRef = doc(db, 'messages', messageId);\n    try {\n      await updateDoc(messageRef, { isRetracted: true });\n    } catch (err) {\n      console.error(\"Error retracting message:\", err);\n    }\n  };\n\n  const handleReaction = async (messageId, emoji) => {\n    if (!user) return;\n    const messageRef = doc(db, 'messages', messageId);\n\n    try {\n      const docSnap = await getDoc(messageRef);\n      if (docSnap.exists()) {\n        const messageData = docSnap.data();\n        const reactions = messageData.reactions || {};\n        const reactionUsers = reactions[emoji] || [];\n\n        if (reactionUsers.includes(user.uid)) {\n          reactions[emoji] = reactionUsers.filter(id => id !== user.uid);\n          if (reactions[emoji].length === 0) {\n            delete reactions[emoji];\n          }\n        } else {\n          reactions[emoji] = [...reactionUsers, user.uid];\n        }\n\n        await updateDoc(messageRef, { reactions });\n      }\n    } catch (err) {\n      console.error(\"Error handling reaction:\", err);\n    }\n    setActiveReactionPickerId(null);\n  };\n\n  if (authLoading) {\n    return (\n      <Container className=\"mt-5 text-center\">\n        <LoadingSpinner />\n        <p className=\"mt-3\">載入使用者狀態...</p>\n      </Container>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Container className=\"mt-5\">\n        <Alert variant=\"warning\">請先登入才能使用聊天室。</Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container className=\"mt-5 chat-container\">\n      <h2 className=\"mb-4\">粉絲聊天室</h2>\n      <div className=\"messages-area\" ref={messagesAreaRef}>\n        {loading && <Spinner animation=\"border\" />}\n        {error && <Alert variant=\"danger\">無法載入訊息：{error.message}</Alert>}\n        <ListGroup>\n          {sortedMessages.map((msg) => (\n            <ListGroup.Item\n              key={msg.id}\n              className={`message-item ${msg.userId === user.uid ? 'sent' : 'received'}`}\n              onMouseEnter={() => setHoveredMessageId(msg.id)}\n              onMouseLeave={() => setHoveredMessageId(null)}\n            >\n              <div className=\"message-content\">\n                {msg.isRetracted ? (\n                  <em className=\"retracted-message\">訊息已收回</em>\n                ) : (\n                  <>\n                    <strong className=\"message-user\">{msg.userName}</strong>\n                    <div className=\"message-text\">{msg.text}</div>\n                    <small className=\"message-time\">\n                      {msg.createdAt?.toDate().toLocaleTimeString()}\n                    </small>\n                    \n                    <div className={`message-toolbar ${msg.userId === user.uid ? 'sent' : 'received'}`}>\n                      {(hoveredMessageId === msg.id || activeReactionPickerId === msg.id) && (\n                        <>\n                          <Button variant=\"link\" className=\"reaction-button\" onClick={() => setActiveReactionPickerId(activeReactionPickerId === msg.id ? null : msg.id)} ref={reactionToggleButtonRef}>...</Button>\n                          {msg.userId === user.uid && (Date.now() - msg.createdAt?.toDate().getTime() < RETRACT_TIME_LIMIT) && (\n                            <Button variant=\"link\" className=\"retract-button\" onClick={() => handleRetractMessage(msg.id)}>收回</Button>\n                          )}\n                        </>\n                      )}\n                    </div>\n\n                    {hoveredMessageId === msg.id && (\n                      <div className={`quick-reactions-container ${msg.userId === user.uid ? 'sent' : 'received'}`}>\n                        {commonEmojis.map(emoji => (\n                          <Button \n                            key={emoji} \n                            variant=\"link\" \n                            className=\"quick-reaction-button\"\n                            onClick={() => handleReaction(msg.id, emoji)}\n                          >\n                            {emoji}\n                          </Button>\n                        ))}\n                      </div>\n                    )}\n\n                    {activeReactionPickerId === msg.id && (\n                      <div className={`picker-container-absolute ${msg.userId === user.uid ? 'sent-picker' : 'received-picker'}`} ref={emojiPickerRef}> {/* Add ref here */}\n                        <EmojiPicker \n                          onEmojiClick={(e) => handleReaction(msg.id, e.emoji)}\n                          pickerStyle={msg.userId === user.uid ? { right: '0px' } : { left: '0px' }}\n                        />\n                      </div>\n                    )}\n\n                    <div className=\"reactions-display\">\n                      {Object.entries(msg.reactions || {}).map(([emoji, users]) => (\n                        users.length > 0 && (\n                          <Badge \n                            key={emoji} \n                            pill \n                            bg={users.includes(user.uid) ? \"primary\" : \"secondary\"}\n                            className=\"reaction-badge\"\n                            onClick={() => handleReaction(msg.id, emoji)}\n                          >\n                            {emoji} {users.length}\n                          </Badge>\n                        )\n                      ))}\n                    </div>\n                  </>\n                )}\n              </div>\n            </ListGroup.Item>\n          ))}\n          <div ref={messagesEndRef} />\n        </ListGroup>\n      </div>\n      <div className=\"input-picker-container\">\n        {showInputPicker && (\n          <>\n            <EmojiPicker onEmojiClick={onInputEmojiClick} />\n            <Button variant=\"secondary\" onClick={() => setShowInputPicker(false)} className=\"mt-2 emoji-close-button\">\n              <IoClose />\n            </Button>\n          </>\n        )}\n      </div>\n      <Form onSubmit={handleSendMessage} className=\"message-form\">\n        <Form.Control\n          type=\"text\"\n          value={newMessage}\n          onChange={(e) => setNewMessage(e.target.value)}\n          placeholder=\"輸入訊息...\"\n          autoComplete=\"off\"\n        />\n        <Button variant=\"light\" onClick={() => setShowInputPicker(val => !val)} className=\"emoji-button\">😊</Button>\n        <Button variant=\"primary\" type=\"submit\" className=\"btn-theme-gradient\">\n          傳送\n        </Button>\n      </Form>\n    </Container>\n  );\n};\n\nexport default ChatRoom;\n"],"names":["collectionName","queryConstraints","arguments","length","undefined","liveUpdate","data","setData","useState","loading","setLoading","error","setError","useEffect","collectionRef","collection","db","q","query","unsubscribe","onSnapshot","querySnapshot","fetchedData","docs","map","doc","id","console","log","err","async","getDocs","fetchData","ChatRoom","user","authLoading","useUser","newMessage","setNewMessage","showInputPicker","setShowInputPicker","hoveredMessageId","setHoveredMessageId","activeReactionPickerId","setActiveReactionPickerId","messagesEndRef","useRef","messagesAreaRef","emojiPickerRef","reactionToggleButtonRef","commonEmojis","messagesQueryConstraints","useMemo","orderBy","limit","messages","useFirestoreCollection","sortedMessages","slice","reverse","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","scrollTop","scrollHeight","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","handleReaction","messageId","emoji","messageRef","docSnap","getDoc","exists","reactions","reactionUsers","includes","uid","filter","updateDoc","_jsxs","Container","className","children","_jsx","LoadingSpinner","ref","Spinner","animation","Alert","variant","message","ListGroup","msg","_msg$createdAt","_msg$createdAt2","Item","userId","onMouseEnter","onMouseLeave","isRetracted","_Fragment","userName","text","createdAt","toDate","toLocaleTimeString","Button","onClick","Date","now","getTime","handleRetractMessage","EmojiPicker","onEmojiClick","e","pickerStyle","right","left","Object","entries","_ref","users","Badge","pill","bg","emojiObject","prevInput","IoClose","Form","onSubmit","preventDefault","trim","addDoc","serverTimestamp","displayName","Control","type","value","onChange","placeholder","autoComplete","val"],"sourceRoot":""}