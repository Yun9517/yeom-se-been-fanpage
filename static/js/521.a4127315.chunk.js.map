{"version":3,"file":"static/js/521.a4127315.chunk.js","mappings":"0LAIA,MAsFA,EAtFgBA,KACd,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,IACpCK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,OAEnCO,EAAAA,EAAAA,WAAU,KACR,MAAMC,EAASC,CAAAA,SAAAA,aAAAA,WAAAA,wBAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,EAAAA,kBAAAA,0CAAAA,iBAAAA,4CAAAA,sBAAAA,yCAAAA,yBAAAA,eAAAA,8BAAAA,eAAAA,qBAAAA,yBAAAA,yBAAAA,8CAAYC,yBAE3B,GADAC,QAAQC,IAAI,kBAAmBJ,GAC3BA,EAAQ,CACV,MAAMK,EAAK,IAAIC,EAAAA,GAAmBN,GAClCF,EAASO,EACX,MACEF,QAAQI,MAAM,2FAEf,IAEH,MAAMC,EAAaC,UACjB,GAAqB,KAAjBhB,EAAMiB,SAAkBb,EAAO,OAEnC,MAAMc,EAAc,CAAEC,OAAQ,OAAQC,KAAMpB,GAC5CF,EAAYuB,GAAQ,IAAIA,EAAMH,IAC9BjB,EAAS,IACTE,GAAa,GAEb,IACE,MAAMmB,EAAQlB,EAAMmB,mBAAmB,CAAED,MAAO,qBAC1CE,EAAS,udAAiFxB,IAE1FyB,QAAeH,EAAMI,gBAAgBF,GACrCG,QAAiBF,EAAOE,SAGxBC,EAAa,CAAET,OAAQ,MAAOC,KAFvBO,EAASP,QAGtBtB,EAAYuB,GAAQ,IAAIA,EAAMO,GAEhC,CAAE,MAAOd,GACPJ,QAAQI,MAAM,4BAA6BA,GAC3C,MAAMe,EAAe,CAAEV,OAAQ,MAAOC,KAAM,yJAC5CtB,EAAYuB,GAAQ,IAAIA,EAAMQ,GAChC,CAAC,QACC1B,GAAa,EACf,GAaF,OACE2B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,6IAELF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAC9BnC,EAASqC,IAAI,CAACC,EAAKC,KAClBH,EAAAA,EAAAA,KAAA,OAAiBF,UAAW,WAAWI,EAAIhB,SAASa,SACjDG,EAAIf,MADGgB,IAIXlC,IAAa+B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,SAAC,4DAE7CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,SACEI,KAAK,OACLC,MAAOtC,EACPuC,SA5BmBC,IACzBvC,EAASuC,EAAEC,OAAOH,QA4BZI,WAzBgBF,IACR,UAAVA,EAAEG,KAAoBzC,GACxBa,KAwBI6B,YAAaxC,EAAQ,sDAAgB,4DACrCyC,SAAU3C,IAAcE,KAE1B6B,EAAAA,EAAAA,KAAA,UAAQa,QAAS/B,EAAY8B,SAAU3C,IAAcE,EAAM4B,SAAC,uB","sources":["components/BinTalk.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './BinTalk.css';\r\nimport { GoogleGenerativeAI } from '@google/generative-ai';\r\n\r\nconst BinTalk = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [genAI, setGenAI] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\r\n    console.log(\"Gemini API Key:\", apiKey); // Debugging line to check if the key is loaded\r\n    if (apiKey) {\r\n      const ai = new GoogleGenerativeAI(apiKey);\r\n      setGenAI(ai);\r\n    } else {\r\n      console.error(\"Gemini API key not found. Please set REACT_APP_GEMINI_API_KEY in your .env.local file.\");\r\n    }\r\n  }, []);\r\n\r\n  const handleSend = async () => {\r\n    if (input.trim() === '' || !genAI) return;\r\n\r\n    const userMessage = { sender: 'user', text: input };\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInput('');\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\"});\r\n      const prompt = `你是一位熱情且樂於助人的助理，也是啦啦隊員廉世彬（廉世彬）的超級粉絲。你的目標是回答有關她的問題。如果問題與她無關，請禮貌地拒絕並將話題引導回廉世彬。問題：${input}`;\r\n      \r\n      const result = await model.generateContent(prompt);\r\n      const response = await result.response;\r\n      const text = response.text();\r\n\r\n      const botMessage = { sender: 'bot', text };\r\n      setMessages(prev => [...prev, botMessage]);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error calling Gemini API:\", error);\r\n      const errorMessage = { sender: 'bot', text: '抱歉，我現在無法回答問題。請檢查 API 金鑰或稍後再試。' };\r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && !isLoading) {\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bintalk-container\">\r\n      <div className=\"bintalk-header\">\r\n        <h2>彬Talk</h2>\r\n        <p>快來聊聊彬彬的大小事，粉絲限定話題等你來問！</p>\r\n      </div>\r\n      <div className=\"bintalk-messages\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`message ${msg.sender}`}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n        {isLoading && <div className=\"message bot\">回覆中請耐心等待...</div>}\r\n      </div>\r\n      <div className=\"bintalk-input-area\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={handleInputChange}\r\n          onKeyPress={handleKeyPress}\r\n          placeholder={genAI ? \"輸入你想問的問題...\" : \"正在初始化，請稍候...\"}\r\n          disabled={isLoading || !genAI}\r\n        />\r\n        <button onClick={handleSend} disabled={isLoading || !genAI}>\r\n          傳送\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BinTalk;\r\n"],"names":["BinTalk","messages","setMessages","useState","input","setInput","isLoading","setIsLoading","genAI","setGenAI","useEffect","apiKey","process","REACT_APP_GEMINI_API_KEY","console","log","ai","GoogleGenerativeAI","error","handleSend","async","trim","userMessage","sender","text","prev","model","getGenerativeModel","prompt","result","generateContent","response","botMessage","errorMessage","_jsxs","className","children","_jsx","map","msg","index","type","value","onChange","e","target","onKeyPress","key","placeholder","disabled","onClick"],"sourceRoot":""}