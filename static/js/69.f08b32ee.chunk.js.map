{"version":3,"file":"static/js/69.f08b32ee.chunk.js","mappings":"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","sources":["components/FanQuiz.js","firebase.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { FiRefreshCcw, FiLink } from 'react-icons/fi';\nimport { FaLine } from 'react-icons/fa';\nimport { Spinner, Alert } from 'react-bootstrap';\nimport './FanQuiz.css';\n\nimport { db } from '../firebase';\nimport { collection, getDocs } from 'firebase/firestore';\n\n\n// Helper function to get random questions\nconst getRandomQuestions = (allQuestions, num = 5) => {\n  const shuffled = [...allQuestions].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, num);\n};\n\nfunction FanQuiz() {\n  const [masterQuestions, setMasterQuestions] = useState([]);\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [userAnswers, setUserAnswers] = useState([]); // New state for user answers\n\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, \"quizzes\"));\n        const fetchedQuestions = querySnapshot.docs.map(doc => doc.data());\n        setMasterQuestions(fetchedQuestions);\n        setQuestions(getRandomQuestions(fetchedQuestions));\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error fetching questions from Firestore:\", err);\n        setError(\"無法載入題目，請稍後再試。\");\n        setLoading(false);\n      }\n    };\n    fetchQuestions();\n  }, []);\n\n  const handleAnswerOptionClick = (selectedOption) => {\n    const currentQ = questions[currentQuestion];\n    const isCorrect = selectedOption === currentQ.answer;\n\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    // Record the user's answer\n    setUserAnswers(prevAnswers => [\n      ...prevAnswers,\n      {\n        question: currentQ.question,\n        correctAnswer: currentQ.answer,\n        userAnswer: selectedOption,\n        isCorrect: isCorrect,\n      },\n    ]);\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  const resetQuiz = useCallback(() => {\n    setCurrentQuestion(0);\n    setScore(0);\n    setShowScore(false);\n    setQuestions(getRandomQuestions(masterQuestions));\n    setUserAnswers([]); // Clear user answers on reset\n  }, [masterQuestions]);\n\n  const generateShareContent = () => {\n    const shareText = `我在 염세빈 粉絲小遊戲中獲得了 ${score} 分！快來挑戰看看你的分數！`;\n    const shareUrl = window.location.href;\n    return { shareText, shareUrl };\n  };\n\n  const handleShareLink = () => {\n    const { shareText, shareUrl } = generateShareContent();\n    const fullShareLink = `${shareText} ${shareUrl}`;\n    navigator.clipboard.writeText(fullShareLink).then(() => {\n      alert('分享連結已複製到剪貼簿！');\n    }).catch(err => {\n      console.error('無法複製分享連結:', err);\n    });\n  };\n\n  const handleShareLine = () => {\n    const { shareText, shareUrl } = generateShareContent();\n    const lineMessage = `${shareText} ${shareUrl}`;\n    const lineShareUrl = `https://line.me/R/msg/text/?${encodeURIComponent(lineMessage)}`;\n    window.open(lineShareUrl, '_blank');\n  };\n\n  // Use ImageWithFallback for the Open Graph image\n  const ogImageUrl = `yeomsebeen_field.jpg`; // Just the filename\n\n  return (\n    <div className=\"fan-quiz-container\">\n      <Helmet>\n        <title>염세빈 粉絲小遊戲！</title>\n        <meta property=\"og:title\" content=\"염세빈 粉絲小遊戲！\" />\n        <meta property=\"og:description\" content=\"快來挑戰看看你對廉世彬的了解程度！\" />\n        {/* For Open Graph image, we need the direct URL, so we construct it here */}\n        <meta property=\"og:image\" content={`https://storage.googleapis.com/yeom-se-been-fanpage-assets/${ogImageUrl}`} />\n        <meta property=\"og:url\" content={window.location.href} />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:image\" content={`https://storage.googleapis.com/yeom-se-been-fanpage-assets/${ogImageUrl}`} />\n      </Helmet>\n      <h2>염세빈 粉絲小遊戲！</h2>\n\n      {loading && (\n        <div className=\"text-center\">\n          <Spinner animation=\"border\" variant=\"light\" />\n          <p className=\"text-white-50 mt-2\">載入中...</p>\n        </div>\n      )}\n      {error && <Alert variant=\"danger\">{error}</Alert>}\n\n      {!loading && !error && (\n        showScore ? (\n          <div className=\"score-section\">\n            <div className=\"score-text\">你獲得了 {score} 分，總分 {questions.length} 分！</div>\n            <div className=\"score-buttons\">\n              <button onClick={handleShareLink} className=\"quiz-button share-link-button\"><FiLink /></button>\n              <button onClick={resetQuiz} className=\"quiz-button play-again-button\"><FiRefreshCcw /></button>\n              <button onClick={handleShareLine} className=\"quiz-button share-line-button\"><FaLine /></button>\n            </div>\n\n            {/* New section to display answers */}\n            <div className=\"quiz-answers-summary mt-4\">\n              <h3>作答結果</h3>\n              {userAnswers.map((item, index) => (\n                <div key={index} className=\"answer-item mb-3 p-3 border rounded\">\n                  <p><strong>問題 {index + 1}:</strong> {item.question}</p>\n                  <p><strong>你的答案:</strong> <span style={{ color: item.isCorrect ? '#28a745' : '#dc3545' }}>{item.userAnswer}</span></p>\n                  {!item.isCorrect && (\n                    <p><strong>正確答案:</strong> <span style={{ color: '#28a745' }}>{item.correctAnswer}</span></p>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        ) : (\n          questions.length > 0 && (\n            <div className=\"question-section\">\n              <div className=\"question-count\">\n                <span>問題 {currentQuestion + 1}</span>/{questions.length}\n              </div>\n              <div className=\"question-text\">\n                {questions[currentQuestion]?.question}\n              </div>\n              <div className=\"answer-section\">\n                {questions[currentQuestion]?.options.map((option, index) => (\n                  <button key={index} onClick={() => handleAnswerOptionClick(option)}>\n                    {option}\n                  </button>\n                ))}\n              </div>\n            </div>\n          )\n        )\n      )}\n    </div>\n  );\n}\n\nexport default FanQuiz;","\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Cloud Firestore and get a reference to the service\nconst db = getFirestore(app);\n\nexport { db };\n"],"names":["getRandomQuestions","allQuestions","num","arguments","length","undefined","sort","Math","random","slice","_questions$currentQue","_questions$currentQue2","masterQuestions","setMasterQuestions","useState","questions","setQuestions","currentQuestion","setCurrentQuestion","score","setScore","showScore","setShowScore","loading","setLoading","error","setError","userAnswers","setUserAnswers","useEffect","async","fetchedQuestions","getDocs","collection","db","docs","map","doc","data","err","console","fetchQuestions","resetQuiz","useCallback","generateShareContent","shareText","shareUrl","window","location","href","ogImageUrl","_jsxs","className","children","Helmet","_jsx","property","content","name","Spinner","animation","variant","Alert","onClick","handleShareLink","fullShareLink","navigator","clipboard","writeText","then","alert","catch","FiLink","FiRefreshCcw","handleShareLine","lineShareUrl","encodeURIComponent","open","FaLine","item","index","question","style","color","isCorrect","userAnswer","correctAnswer","options","option","selectedOption","currentQ","answer","prevAnswers","nextQuestion","handleAnswerOptionClick","app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getFirestore"],"sourceRoot":""}