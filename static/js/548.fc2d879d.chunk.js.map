{"version":3,"file":"static/js/548.fc2d879d.chunk.js","mappings":"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","sources":["hooks/useFirestoreCollection.js","components/ChatRoom.js","hooks/useUserProfile.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { collection, query, getDocs, onSnapshot } from 'firebase/firestore';\nimport { db } from '../firebase'; // 假設你的 firebase.js 導出了 db\n\nconst useFirestoreCollection = (collectionName, queryConstraints = [], liveUpdate = false) => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    setError(null); // Clear previous errors\n\n    const collectionRef = collection(db, collectionName);\n    let q = query(collectionRef, ...queryConstraints); // 應用傳入的查詢約束\n\n    const fetchData = async () => {\n      try {\n        const querySnapshot = await getDocs(q);\n        const fetchedData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setData(fetchedData);\n        console.log(`useFirestoreCollection: Fetched data from ${collectionName}.`);\n      } catch (err) {\n        console.error(`useFirestoreCollection: Error fetching data from ${collectionName}:`, err);\n        setError(`無法載入 ${collectionName} 資料，請稍後再試。`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    const setupLiveListener = () => {\n      const unsubscribe = onSnapshot(q, (querySnapshot) => {\n        const fetchedData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setData(fetchedData);\n        setLoading(false);\n        setError(null);\n        console.log(`useFirestoreCollection: Live update from ${collectionName}.`);\n      }, (err) => {\n        console.error(`useFirestoreCollection: Live update error for ${collectionName}:`, err);\n        setError(`即時更新 ${collectionName} 資料失敗。`);\n        setLoading(false);\n      });\n      return unsubscribe;\n    };\n\n    let unsubscribe = null;\n    if (liveUpdate) {\n      unsubscribe = setupLiveListener();\n    } else {\n      fetchData();\n    }\n\n    // Cleanup function for useEffect\n    return () => {\n      if (unsubscribe) {\n        unsubscribe(); // Unsubscribe from live listener if it was set up\n      }\n    };\n  }, [collectionName, queryConstraints, liveUpdate]); // 依賴項，當這些改變時重新執行 effect\n\n  return { data, loading, error };\n};\n\nexport default useFirestoreCollection;\n","import React, { useState, useEffect, useRef, useMemo, useLayoutEffect } from 'react';\nimport { Container, Form, Button, ListGroup, Spinner, Alert, Badge, Modal } from 'react-bootstrap';\nimport { IoClose } from 'react-icons/io5';\nimport EmojiPicker from 'emoji-picker-react';\nimport { useUser } from '../context/UserContext';\nimport { useUserProfile } from '../hooks/useUserProfile';\nimport LoadingSpinner from './LoadingSpinner'; // Import LoadingSpinner\nimport useFirestoreCollection from '../hooks/useFirestoreCollection';\nimport { collection, addDoc, serverTimestamp, orderBy, limit, doc, updateDoc, getDoc } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport './ChatRoom.css';\n\nconst RETRACT_TIME_LIMIT = 5 * 60 * 1000; // 5 minutes in milliseconds\n\nconst ChatRoom = () => {\n  const { user, authLoading, loading } = useUser();\n  const { \n    updateUserProfile, \n    resetToInitialNickname, \n    isUpdating: isUpdatingNickname, \n    error: nicknameUpdateError, \n    setError: setNicknameUpdateError \n  } = useUserProfile();\n  const [newMessage, setNewMessage] = useState('');\n  const [showInputPicker, setShowInputPicker] = useState(false);\n  const [hoveredMessageId, setHoveredMessageId] = useState(null);\n  const [activeReactionPickerId, setActiveReactionPickerId] = useState(null);\n  const messagesEndRef = useRef(null);\n  const messagesAreaRef = useRef(null);\n  const emojiPickerRef = useRef(null); // Ref for emoji picker container\n  const reactionToggleButtonRef = useRef(null); // Ref for the reaction toggle button\n\n  const [showNicknameModal, setShowNicknameModal] = useState(false);\n  const [newNickname, setNewNickname] = useState(user?.displayName || '');\n\n  const commonEmojis = ['👍', '😲', '🥺'];\n\n  const messagesQueryConstraints = useMemo(() => [orderBy('createdAt', 'desc'), limit(100)], []);\n  const { data: messages, loading: messagesLoading, error } = useFirestoreCollection('messages', messagesQueryConstraints, true);\n  const prevMessagesCountRef = useRef(messages.length);\n\n  const sortedMessages = useMemo(() => messages.slice().reverse(), [messages]);\n\n  const onInputEmojiClick = (emojiObject) => {\n    setNewMessage(prevInput => prevInput + emojiObject.emoji);\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useLayoutEffect(() => {\n    const messagesArea = messagesAreaRef.current;\n    if (!messagesArea) return;\n\n    // Only scroll to bottom if a new message has been added\n    if (messages.length > prevMessagesCountRef.current) {\n      scrollToBottom();\n    }\n\n    // Update the ref to the current message count for the next render\n    prevMessagesCountRef.current = messages.length;\n  }, [messages, messages.length]);\n\n  useEffect(() => {\n    if (messagesAreaRef.current) {\n      messagesAreaRef.current.scrollTop = messagesAreaRef.current.scrollHeight;\n    }\n  }, [messagesLoading]);\n\n  // Effect to handle click outside for closing emoji picker\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target) &&\n          reactionToggleButtonRef.current && !reactionToggleButtonRef.current.contains(event.target)) {\n        setActiveReactionPickerId(null);\n      }\n    }\n\n    if (activeReactionPickerId) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [activeReactionPickerId]);\n\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n    if (newMessage.trim() === '' || !user) return;\n\n    try {\n      await addDoc(collection(db, 'messages'), {\n        text: newMessage,\n        createdAt: serverTimestamp(),\n        userId: user.uid,\n        userName: user.displayName || '匿名用戶',\n        isRetracted: false,\n        reactions: {}, // Ensure reactions field is created\n      });\n      setNewMessage('');\n      scrollToBottom(); // Force scroll to bottom after sending a message\n    } catch (err) {\n      console.error(\"Error sending message:\", err);\n    }\n  };\n\n  const handleRetractMessage = async (messageId) => {\n    const messageRef = doc(db, 'messages', messageId);\n    try {\n      await updateDoc(messageRef, { isRetracted: true });\n    } catch (err) {\n      console.error(\"Error retracting message:\", err);\n    }\n  };\n\n  const handleReaction = async (messageId, emoji) => {\n    if (!user) return;\n    const messageRef = doc(db, 'messages', messageId);\n\n    try {\n      const docSnap = await getDoc(messageRef);\n      if (docSnap.exists()) {\n        const messageData = docSnap.data();\n        const reactions = messageData.reactions || {};\n        const reactionUsers = reactions[emoji] || [];\n\n        if (reactionUsers.includes(user.uid)) {\n          reactions[emoji] = reactionUsers.filter(id => id !== user.uid);\n          if (reactions[emoji].length === 0) {\n            delete reactions[emoji];\n          }\n        } else {\n          reactions[emoji] = [...reactionUsers, user.uid];\n        }\n\n        await updateDoc(messageRef, { reactions });\n      }\n    } catch (err) {\n      console.error(\"Error handling reaction:\", err);\n    }\n    setActiveReactionPickerId(null);\n  };\n\n  const handleUpdateNickname = async (e) => {\n    e.preventDefault();\n    try {\n      await updateUserProfile(newNickname);\n      setShowNicknameModal(false);\n    } catch (err) {\n      // Error is already set in the hook, just log it\n      console.error(err.message);\n    }\n  };\n\n  const handleResetNickname = async () => {\n    try {\n      await resetToInitialNickname();\n      setShowNicknameModal(false);\n    } catch (err) {\n      // Error is already set in the hook, just log it\n      console.error(err.message);\n    }\n  };\n\n  if (authLoading) {\n    return (\n      <Container className=\"mt-5 text-center\">\n        <LoadingSpinner />\n        <p className=\"mt-3\">載入使用者狀態...</p>\n      </Container>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Container className=\"mt-5\">\n        <Alert variant=\"warning\">請先登入才能使用聊天室。</Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container className=\"chat-container\">\n      <div className=\"position-relative text-center mb-3\">\n        <h2 className=\"mb-0\">粉絲聊天室</h2>\n        {user && !user.isAnonymous && (\n          <Button\n            variant=\"outline-info\"\n            size=\"sm\"\n            onClick={() => {\n              setNewNickname(user.displayName || '');\n              setNicknameUpdateError(null); // Clear previous errors\n              setShowNicknameModal(true);\n            }}\n            style={{ position: 'absolute', right: 0, top: '50%', transform: 'translateY(-50%)' }}\n          >\n            修改暱稱\n          </Button>\n        )}\n      </div>\n      <div className=\"messages-area\" ref={messagesAreaRef}>\n        {loading && <Spinner animation=\"border\" />}\n        {error && <Alert variant=\"danger\">無法載入訊息：{error.message}</Alert>}\n        <ListGroup>\n          {sortedMessages.map((msg) => (\n            <ListGroup.Item\n              key={msg.id}\n              className={`message-item ${msg.userId === user.uid ? 'sent' : 'received'}`}\n              onMouseEnter={() => setHoveredMessageId(msg.id)}\n              onMouseLeave={() => setHoveredMessageId(null)}\n            >\n              <div className=\"message-content\">\n                {msg.isRetracted ? (\n                  <em className=\"retracted-message\">訊息已收回</em>\n                ) : (\n                  <>\n                    <strong className=\"message-user\">{msg.userName}</strong>\n                    <div className=\"message-text\">{msg.text}</div>\n                    <small className=\"message-time\">\n                      {msg.createdAt?.toDate().toLocaleTimeString()}\n                    </small>\n                    \n                    <div className={`message-toolbar ${msg.userId === user.uid ? 'sent' : 'received'}`}>\n                      {(hoveredMessageId === msg.id || activeReactionPickerId === msg.id) && (\n                        <>\n                          <Button variant=\"link\" className=\"reaction-button\" onClick={() => setActiveReactionPickerId(activeReactionPickerId === msg.id ? null : msg.id)} ref={reactionToggleButtonRef}>...</Button>\n                          {msg.userId === user.uid && (Date.now() - msg.createdAt?.toDate().getTime() < RETRACT_TIME_LIMIT) && (\n                            <Button variant=\"link\" className=\"retract-button\" onClick={() => handleRetractMessage(msg.id)}>收回</Button>\n                          )}\n                        </>\n                      )}\n                    </div>\n\n                    {hoveredMessageId === msg.id && (\n                      <div className={`quick-reactions-container ${msg.userId === user.uid ? 'sent' : 'received'}`}>\n                        {commonEmojis.map(emoji => (\n                          <Button \n                            key={emoji} \n                            variant=\"link\" \n                            className=\"quick-reaction-button\"\n                            onClick={() => handleReaction(msg.id, emoji)}\n                          >\n                            {emoji}\n                          </Button>\n                        ))}\n                      </div>\n                    )}\n\n                    {activeReactionPickerId === msg.id && (\n                      <div className={`picker-container-absolute ${msg.userId === user.uid ? 'sent-picker' : 'received-picker'}`} ref={emojiPickerRef}> {/* Add ref here */}\n                        <EmojiPicker\n                          onEmojiClick={(e) => handleReaction(msg.id, e.emoji)}\n                          height={350}\n                          width={250}\n                          className=\"reaction-emoji-picker\"\n                        />\n                      </div>\n                    )}\n\n                    <div className=\"reactions-display\">\n                      {Object.entries(msg.reactions || {}).map(([emoji, users]) => (\n                        users.length > 0 && (\n                          <Badge \n                            key={emoji} \n                            pill \n                            bg={users.includes(user.uid) ? \"primary\" : \"secondary\"}\n                            className=\"reaction-badge\"\n                            onClick={() => handleReaction(msg.id, emoji)}\n                          >\n                            {emoji} {users.length}\n                          </Badge>\n                        )\n                      ))}\n                    </div>\n                  </>\n                )}\n              </div>\n            </ListGroup.Item>\n          ))}\n          <div ref={messagesEndRef} />\n        </ListGroup>\n      </div>\n      <div className=\"input-picker-container\">\n        {showInputPicker && (\n          <>\n            <EmojiPicker onEmojiClick={onInputEmojiClick} />\n            <Button variant=\"secondary\" onClick={() => setShowInputPicker(false)} className=\"mt-2 emoji-close-button\">\n              <IoClose />\n            </Button>\n          </>\n        )}\n      </div>\n      <Form onSubmit={handleSendMessage} className=\"message-form\">\n        <Form.Control\n          size=\"md\"\n          type=\"text\"\n          value={newMessage}\n          onChange={(e) => setNewMessage(e.target.value)}\n          placeholder=\"輸入訊息...\"\n          autoComplete=\"off\"\n        />\n        <Button size=\"md\" variant=\"light\" onClick={() => setShowInputPicker(val => !val)} className=\"emoji-button\">😊</Button>\n        <Button size=\"md\" variant=\"primary\" type=\"submit\" className=\"btn-theme-gradient\">\n          傳送\n        </Button>\n      </Form>\n\n      {/* Nickname Edit Modal */}\n      <Modal show={showNicknameModal} onHide={() => setShowNicknameModal(false)} centered dialogClassName=\"nickname-modal\">\n        <Modal.Header className=\"bg-dark text-white\">\n          <Modal.Title>修改聊天室暱稱</Modal.Title>\n        </Modal.Header>\n        <Modal.Body className=\"bg-dark text-white\">\n          <Form onSubmit={handleUpdateNickname}>\n            <Form.Group className=\"mb-3\">\n              <Form.Label>新暱稱</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"輸入新暱稱\"\n                value={newNickname}\n                onChange={(e) => setNewNickname(e.target.value)}\n                isInvalid={!!nicknameUpdateError}\n                disabled={isUpdatingNickname}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {nicknameUpdateError?.message}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <div className=\"d-flex justify-content-end\">\n              <Button variant=\"secondary\" onClick={() => setShowNicknameModal(false)} disabled={isUpdatingNickname} className=\"me-2\">\n                取消\n              </Button>\n              <Button variant=\"outline-warning\" onClick={handleResetNickname} disabled={isUpdatingNickname || loading} className=\"me-2\">\n                初始暱稱\n              </Button>\n              <Button variant=\"primary\" type=\"submit\" disabled={isUpdatingNickname}>\n                {isUpdatingNickname ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> : '儲存變更'}\n              </Button>\n            </div>\n          </Form>\n        </Modal.Body>\n      </Modal>\n    </Container>\n  );\n};\n\nexport default ChatRoom;\n","import { useState, useCallback } from 'react';\nimport { auth, db } from '../firebase';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { updateProfile } from 'firebase/auth';\nimport { useUser } from '../context/UserContext';\n\nexport const useUserProfile = () => {\n  const { user, userAchievements, fetchUserData } = useUser();\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [error, setError] = useState(null);\n\n  const updateUserProfile = useCallback(async (newDisplayName) => {\n    if (!user || user.isAnonymous) {\n      const err = new Error(\"未登入或匿名用戶無法修改暱稱。\");\n      setError(err);\n      throw err;\n    }\n    if (!newDisplayName || newDisplayName.trim() === '') {\n      const err = new Error(\"暱稱不能為空。\");\n      setError(err);\n      throw err;\n    }\n\n    setIsUpdating(true);\n    setError(null);\n\n    try {\n      await updateProfile(auth.currentUser, {\n        displayName: newDisplayName.trim()\n      });\n\n      const userDocRef = doc(db, 'userAchievements', user.uid);\n      await setDoc(userDocRef, { userName: newDisplayName.trim() }, { merge: true });\n\n      await fetchUserData();\n\n      setIsUpdating(false);\n      return { success: true };\n    } catch (e) {\n      console.error(\"Error updating user profile:\", e);\n      const err = new Error(\"更新暱稱失敗，請稍後再試。\");\n      setError(err);\n      setIsUpdating(false);\n      throw err;\n    }\n  }, [user, fetchUserData]);\n\n  const resetToInitialNickname = useCallback(async () => {\n    if (!user || user.isAnonymous) {\n      const err = new Error(\"未登入或匿名用戶無法重設暱稱。\");\n      setError(err);\n      throw err;\n    }\n    if (!userAchievements || !userAchievements.initialDisplayName) {\n      const err = new Error(\"無法取得初始暱稱。\");\n      setError(err);\n      throw err;\n    }\n\n    // No need to set loading/error state here as it's handled by updateUserProfile\n    try {\n      await updateUserProfile(userAchievements.initialDisplayName);\n      return { success: true };\n    } catch (e) {\n      // Error is already set by the updateUserProfile call\n      console.error(\"Error resetting nickname:\", e);\n      throw new Error(\"重設暱稱失敗，請稍後再試。\");\n    }\n  }, [user, userAchievements, updateUserProfile]);\n\n  return {\n    updateUserProfile,\n    resetToInitialNickname,\n    isUpdating,\n    error,\n    setError, // Expose setError to allow clearing it from the component\n  };\n};"],"names":["collectionName","queryConstraints","arguments","length","undefined","liveUpdate","data","setData","useState","loading","setLoading","error","setError","useEffect","collectionRef","collection","db","q","query","unsubscribe","onSnapshot","querySnapshot","fetchedData","docs","map","doc","id","console","log","err","async","getDocs","fetchData","ChatRoom","user","authLoading","useUser","updateUserProfile","resetToInitialNickname","isUpdating","isUpdatingNickname","nicknameUpdateError","setNicknameUpdateError","useUserProfile","userAchievements","fetchUserData","setIsUpdating","useCallback","isAnonymous","Error","newDisplayName","trim","updateProfile","auth","currentUser","displayName","userDocRef","uid","setDoc","userName","merge","success","e","initialDisplayName","newMessage","setNewMessage","showInputPicker","setShowInputPicker","hoveredMessageId","setHoveredMessageId","activeReactionPickerId","setActiveReactionPickerId","messagesEndRef","useRef","messagesAreaRef","emojiPickerRef","reactionToggleButtonRef","showNicknameModal","setShowNicknameModal","newNickname","setNewNickname","commonEmojis","messagesQueryConstraints","useMemo","orderBy","limit","messages","messagesLoading","useFirestoreCollection","prevMessagesCountRef","sortedMessages","slice","reverse","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","useLayoutEffect","scrollTop","scrollHeight","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","handleReaction","messageId","emoji","messageRef","docSnap","getDoc","exists","reactions","reactionUsers","includes","filter","updateDoc","_jsxs","Container","className","children","_jsx","LoadingSpinner","Button","variant","size","onClick","style","position","right","top","transform","ref","Spinner","animation","Alert","message","ListGroup","msg","_msg$createdAt","_msg$createdAt2","Item","userId","onMouseEnter","onMouseLeave","isRetracted","_Fragment","text","createdAt","toDate","toLocaleTimeString","Date","now","getTime","handleRetractMessage","EmojiPicker","onEmojiClick","height","width","Object","entries","_ref","users","Badge","pill","bg","emojiObject","prevInput","IoClose","Form","onSubmit","preventDefault","addDoc","serverTimestamp","Control","type","value","onChange","placeholder","autoComplete","val","Modal","show","onHide","centered","dialogClassName","Header","Title","Body","Group","Label","isInvalid","disabled","Feedback","as","role"],"sourceRoot":""}