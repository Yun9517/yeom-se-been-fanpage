{"version":3,"file":"static/js/235.98709274.chunk.js","mappings":"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","sources":["hooks/useFirestoreDocument.js","components/ChatHistorySidebar.js","components/ChatWindow.js","components/ChatPage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { doc, getDoc } from 'firebase/firestore';\nimport { db } from '../firebase';\n\nconst useFirestoreDocument = (collectionName, documentId) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const docRef = doc(db, collectionName, documentId);\n        const docSnap = await getDoc(docRef);\n\n        if (docSnap.exists()) {\n          setData(docSnap.data());\n          console.log(`useFirestoreDocument: Fetched data for ${collectionName}/${documentId}.`);\n        } else {\n          setData(null);\n          console.log(`useFirestoreDocument: No document found for ${collectionName}/${documentId}.`);\n        }\n      } catch (err) {\n        console.error(`useFirestoreDocument: Error fetching document ${collectionName}/${documentId}:`, err);\n        setError(`無法載入 ${collectionName} 內容，請稍後再試。`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [collectionName, documentId]);\n\n  return { data, loading, error };\n};\n\nexport default useFirestoreDocument;\n","import React from 'react';\nimport { FaTrash } from 'react-icons/fa';\n\nconst ChatHistorySidebar = ({ chats, activeChatId, onSelectChat, onNewChat, onDeleteChat, isOpen }) => {\n  return (\n    <div className={`chat-history-sidebar ${isOpen ? 'open' : ''}`}>\n      <button onClick={onNewChat} className=\"new-chat-btn\">\n        + 新增對話\n      </button>\n      <ul className=\"chat-history-list\">\n        {chats.map((chat) => (\n          <li\n            key={chat.id}\n            className={`chat-history-item ${chat.id === activeChatId ? 'active' : ''}`}\n            onClick={() => onSelectChat(chat.id)}\n          >\n            <span className=\"chat-item-title\" title={chat.title}>{chat.title}</span>\n            <button \n              className=\"delete-chat-btn\"\n              onClick={(e) => {\n                e.stopPropagation(); // Prevent li's onClick from firing\n                onDeleteChat(chat.id);\n              }}\n              title=\"刪除對話\"\n            >\n              <FaTrash />\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ChatHistorySidebar;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { FaBars } from 'react-icons/fa';\nimport './ChatPage.css';\n\nconst ChatWindow = ({ messages, onSendMessage, isLoading, activeChatId, onToggleSidebar, isGuest }) => {\n  const [input, setInput] = useState('');\n  const messagesEndRef = useRef(null); // Ref for the anchor div\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Clear input when starting a new chat\n  useEffect(() => {\n    if (!activeChatId) {\n      setInput('');\n    }\n  }, [activeChatId]);\n\n  const handleSend = () => {\n    if (input.trim() === '') return;\n    onSendMessage(input);\n    setInput('');\n  };\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !isLoading) {\n      handleSend();\n    }\n  };\n\n  return (\n    <div className=\"chat-window-main\">\n       <div className=\"beentalk-header\">\n        { !isGuest && (\n          <button className=\"sidebar-toggle-btn\" onClick={onToggleSidebar}>\n            <FaBars />\n          </button>\n        )}\n        <h2>彬Talk</h2>\n        <p>有想知道的都等你來問！</p>\n      </div>\n      <div className=\"beentalk-messages\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`message ${msg.sender}`}>\n            {msg.text}\n          </div>\n        ))}\n        {isLoading && <div className=\"message bot\">請稍等...</div>}\n        <div ref={messagesEndRef} /> {/* Invisible anchor div at the end */}\n      </div>\n      <div className=\"beentalk-input-area\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={handleInputChange}\n          onKeyPress={handleKeyPress}\n          placeholder={\"輸入你想問的問題...\"}\n          disabled={isLoading}\n        />\n        <button onClick={handleSend} disabled={isLoading} className=\"btn btn-theme-gradient\">\n          傳送\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatWindow;\n","import React, { useState, useEffect } from 'react';\nimport { useUser } from '../context/UserContext';\nimport { db } from '../firebase';\nimport { collection, query, orderBy, onSnapshot, addDoc, doc, updateDoc, deleteDoc, serverTimestamp } from 'firebase/firestore';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\nimport ChatHistorySidebar from './ChatHistorySidebar';\nimport ChatWindow from './ChatWindow';\nimport LoadingSpinner from './LoadingSpinner';\nimport useFirestoreDocument from '../hooks/useFirestoreDocument';\n\nimport './ChatPage.css';\n\nconst ChatPage = () => {\n  const { user, authLoading } = useUser();\n  const [chats, setChats] = useState([]);\n  const [activeChatId, setActiveChatId] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [genAI, setGenAI] = useState(null);\n  const [isSidebarOpen, setSidebarOpen] = useState(false);\n  \n  // Fetch dynamic data from Firestore\n  const { data: aboutContent, loading: aboutLoading } = useFirestoreDocument('pages', 'about');\n  const { data: promptConfig, loading: promptLoading } = useFirestoreDocument('pages', 'beentalk');\n\n  // Initialize Gemini AI\n  useEffect(() => {\n    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    if (apiKey) {\n      const ai = new GoogleGenerativeAI(apiKey);\n      setGenAI(ai);\n    }\n  }, []);\n\n  // Effect for logged-in user data\n  useEffect(() => {\n    if (!user || user.isAnonymous) {\n      setChats([]);\n      setActiveChatId(null);\n      setMessages([]); // Clear all data on logout or for anonymous user\n      return;\n    }\n\n    // Fetch user's chat list\n    const q = query(collection(db, 'users', user.uid, 'chats'), orderBy('createdAt', 'desc'));\n    const unsubscribeChats = onSnapshot(q, (snapshot) => {\n      const chatList = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      setChats(chatList);\n    });\n\n    // Fetch messages for the active chat\n    let unsubscribeMessages = () => {};\n    if (activeChatId) {\n      unsubscribeMessages = onSnapshot(doc(db, 'users', user.uid, 'chats', activeChatId), (doc) => {\n        if (doc.exists()) {\n          setMessages(doc.data().messages || []);\n        }\n      });\n    } else {\n        setMessages([]); // Clear messages if no chat is active\n    }\n\n    return () => {\n        unsubscribeChats();\n        unsubscribeMessages();\n    };\n  }, [user, activeChatId]);\n\n\n  const handleSelectChat = (chatId) => {\n    setActiveChatId(chatId);\n    setSidebarOpen(false); // Close sidebar on selection\n  };\n\n  const handleNewChat = () => {\n    setActiveChatId(null);\n    setMessages([]);\n    setSidebarOpen(false); // Close sidebar on new chat\n  };\n\n  const handleDeleteChat = async (chatId) => {\n    if (!user || user.isAnonymous || !chatId) return;\n    if (window.confirm('您確定要刪除這段對話嗎？')) {\n      await deleteDoc(doc(db, 'users', user.uid, 'chats', chatId));\n      if (activeChatId === chatId) {\n        handleNewChat();\n      }\n    }\n  };\n\n  const handleSendMessage = async (inputText) => {\n    const isGuest = !user || user.isAnonymous;\n    const dataIsLoading = aboutLoading || promptLoading;\n\n    if (!genAI || (!isGuest && dataIsLoading)) return;\n\n    const userMessage = { sender: 'user', text: inputText };\n    setIsLoading(true);\n    \n    const newMessages = [...messages, userMessage];\n    setMessages(newMessages);\n\n    const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n    \n    // Dynamically build context from Firestore\n    let aboutContext = '';\n    if (aboutContent) {\n      aboutContext = `\n以下是網站關於廉世彬的介紹內容，請參考這些資訊來回答問題：\n${aboutContent.section2022Title}: ${aboutContent.section2022Content}\n${aboutContent.section2023Title}: ${aboutContent.section2023Content}\n${aboutContent.section2025Title}: ${aboutContent.section2025Content}\n`;\n    }\n\n    const persona = promptConfig?.persona || '你是一位熱情且樂於助人的助理。';\n    const staticData = promptConfig?.static_data || '';\n    const faqData = promptConfig?.faq ? `\n常見問題參考：\n${promptConfig.faq}` : '';\n    const loginPromptSegment = isGuest ? (promptConfig?.guest_prompt || '') : '';\n\n    const prompt = `${persona} ${loginPromptSegment}\n\n${staticData}\n${faqData}\n${aboutContext}\n\n問題：${inputText}`;\n\n    try {\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const botText = response.text();\n      const botMessage = { sender: 'bot', text: botText };\n      const finalMessages = [...newMessages, botMessage];\n      setMessages(finalMessages);\n\n      if (user && !user.isAnonymous) {\n        let currentChatId = activeChatId;\n        if (!currentChatId) {\n          const firstTitle = inputText.substring(0, 20) + '...';\n          const newChatRef = await addDoc(collection(db, 'users', user.uid, 'chats'), {\n            title: firstTitle,\n            createdAt: serverTimestamp(),\n            messages: finalMessages,\n          });\n          setActiveChatId(newChatRef.id);\n        } else {\n          const chatRef = doc(db, 'users', user.uid, 'chats', currentChatId);\n          await updateDoc(chatRef, { messages: finalMessages });\n        }\n      }\n\n    } catch (error) {\n      console.error(\"Error calling Gemini API:\", error);\n      let botMessageText = '哎呀！彬Talk目前有點忙碌，就像廉世彬在場上一樣分身乏術！這可能是因為短時間內的用量達到了上限，請稍後再試一次，或明天再回來看看喔，不好意思！';\n      const errorMessage = { sender: 'bot', text: botMessageText };\n      const finalMessages = [...newMessages, errorMessage];\n      setMessages(finalMessages);\n\n      if (user && !user.isAnonymous && activeChatId) {\n          const chatRef = doc(db, 'users', user.uid, 'chats', activeChatId);\n          await updateDoc(chatRef, { messages: finalMessages });\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (authLoading) {\n    return <LoadingSpinner loading={true} />;\n  }\n\n  const totalLoading = aboutLoading || promptLoading;\n\n  if (user && !user.isAnonymous) {\n    // Logged-in user UI\n    return (\n      <div className=\"chat-page-container\">\n        <div className={`page-overlay ${isSidebarOpen ? 'active' : ''}`} onClick={() => setSidebarOpen(false)}></div>\n        <ChatHistorySidebar \n          chats={chats}\n          activeChatId={activeChatId}\n          onSelectChat={handleSelectChat}\n          onNewChat={handleNewChat}\n          onDeleteChat={handleDeleteChat}\n          isOpen={isSidebarOpen}\n        />\n        <ChatWindow \n          messages={messages}\n          onSendMessage={handleSendMessage}\n          isLoading={isLoading || totalLoading}\n          activeChatId={activeChatId}\n          onToggleSidebar={() => setSidebarOpen(!isSidebarOpen)}\n          isGuest={false}\n        />\n      </div>\n    );\n  } else {\n    // Guest & Anonymous User UI\n    return (\n        <div className=\"chat-page-container guest-mode\">\n            <ChatWindow \n                messages={messages}\n                onSendMessage={handleSendMessage}\n                isLoading={isLoading || totalLoading}\n                activeChatId={null}\n                onToggleSidebar={() => {}}\n                isGuest={true}\n            />\n        </div>\n    );\n  }\n};\n\nexport default ChatPage;\n"],"names":["useFirestoreDocument","collectionName","documentId","data","setData","useState","loading","setLoading","error","setError","useEffect","async","docRef","doc","db","docSnap","getDoc","exists","console","log","err","fetchData","_ref","chats","activeChatId","onSelectChat","onNewChat","onDeleteChat","isOpen","_jsxs","className","children","_jsx","onClick","map","chat","id","title","e","stopPropagation","FaTrash","messages","onSendMessage","isLoading","onToggleSidebar","isGuest","input","setInput","messagesEndRef","useRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSend","trim","FaBars","msg","index","sender","text","ref","type","value","onChange","target","onKeyPress","key","placeholder","disabled","ChatPage","user","authLoading","useUser","setChats","setActiveChatId","setMessages","setIsLoading","genAI","setGenAI","isSidebarOpen","setSidebarOpen","aboutContent","aboutLoading","promptConfig","promptLoading","apiKey","process","ai","GoogleGenerativeAI","isAnonymous","q","query","collection","uid","orderBy","unsubscribeChats","onSnapshot","snapshot","chatList","docs","unsubscribeMessages","handleSelectChat","chatId","handleNewChat","handleDeleteChat","window","confirm","deleteDoc","handleSendMessage","userMessage","inputText","newMessages","model","getGenerativeModel","aboutContext","section2022Title","section2022Content","section2023Title","section2023Content","section2025Title","section2025Content","persona","staticData","static_data","faqData","faq","prompt","guest_prompt","result","generateContent","response","botMessage","finalMessages","currentChatId","chatRef","updateDoc","firstTitle","substring","newChatRef","addDoc","createdAt","serverTimestamp","errorMessage","LoadingSpinner","totalLoading","ChatHistorySidebar","ChatWindow"],"sourceRoot":""}