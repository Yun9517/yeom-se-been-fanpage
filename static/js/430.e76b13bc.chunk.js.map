{"version":3,"file":"static/js/430.e76b13bc.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/InputGroupText.js","../node_modules/react-bootstrap/esm/InputGroup.js","components/QuizHistory.js"],"sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nInputGroupText.displayName = 'InputGroupText';\nexport default InputGroupText;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport InputGroupText from './InputGroupText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n\n  // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});","import React, { useState, useEffect } from 'react';\nimport { db, auth } from '../firebase';\nimport { collection, query, where, orderBy, getDocs, limit, startAfter, doc, getDoc as getSingleDoc, Timestamp } from 'firebase/firestore';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { Container, Spinner, Alert, Table, Accordion, Button, Dropdown, Form, InputGroup, Row, Col } from 'react-bootstrap';\nimport { FaCheckCircle, FaTimesCircle } from 'react-icons/fa';\nimport './QuizHistory.css';\n\nconst QuizHistory = () => {\n  const [user, authLoading] = useAuthState(auth);\n  const [history, setHistory] = useState([]);\n  const [userAchievementsData, setUserAchievementsData] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [dateError, setDateError] = useState(''); // State for date validation error\n  const [sortField, setSortField] = useState('createdAt');\n  const [sortOrder, setSortOrder] = useState('desc');\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10);\n  const [lastVisible, setLastVisible] = useState(null);\n  const [pageHistory, setPageHistory] = useState([null]);\n  const [hasMore, setHasMore] = useState(false);\n  const [customItemsPerPage, setCustomItemsPerPage] = useState('');\n\n  const [startDateInput, setStartDateInput] = useState('');\n  const [endDateInput, setEndDateInput] = useState('');\n\n  const [filterStartDate, setFilterStartDate] = useState('');\n  const [filterEndDate, setFilterEndDate] = useState('');\n\n  useEffect(() => {\n    if (user) {\n      setCurrentPage(1);\n      setLastVisible(null);\n      setPageHistory([null]);\n      setHasMore(false);\n      setError(null);\n    } else {\n      setHistory([]);\n      setLoading(false);\n      setError(\"請先登入以查看遊戲紀錄。\");\n      setCurrentPage(1);\n      setLastVisible(null);\n      setPageHistory([null]);\n      setHasMore(false);\n    }\n  }, [user]);\n\n  useEffect(() => {\n    const fetchQuizHistory = async () => {\n      if (authLoading) return;\n      if (!user) return;\n\n      setLoading(true);\n\n      try {\n        const userAchievementsRef = doc(db, \"userAchievements\", user.uid);\n        const userAchievementsSnap = await getSingleDoc(userAchievementsRef);\n        setUserAchievementsData(userAchievementsSnap.exists() ? userAchievementsSnap.data() : {});\n\n        let baseQuery = collection(db, \"scores\");\n        let q = query(baseQuery, where(\"userId\", \"==\", user.uid));\n\n        if (filterStartDate) {\n          const startTimestamp = Timestamp.fromDate(new Date(filterStartDate + 'T00:00:00'));\n          q = query(q, where(\"createdAt\", \">=\", startTimestamp));\n        }\n        if (filterEndDate) {\n          const endTimestamp = Timestamp.fromDate(new Date(filterEndDate + 'T23:59:59'));\n          q = query(q, where(\"createdAt\", \"<=\", endTimestamp));\n        }\n\n        q = query(q, orderBy(sortField, sortOrder));\n\n        if (pageHistory[currentPage - 1]) {\n          q = query(q, startAfter(pageHistory[currentPage - 1]));\n        }\n\n        q = query(q, limit(itemsPerPage + 1));\n\n        const querySnapshot = await getDocs(q);\n        const fetchedHistory = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n\n        setHasMore(fetchedHistory.length > itemsPerPage);\n        const currentItems = fetchedHistory.slice(0, itemsPerPage);\n        setHistory(currentItems);\n        setLastVisible(querySnapshot.docs[currentItems.length - 1]);\n\n      } catch (err) {\n        console.error(\"Error fetching quiz history:\", err);\n        setError(\"無法載入遊戲紀錄，請稍後再試。\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchQuizHistory();\n\n  }, [user, authLoading, sortField, sortOrder, currentPage, itemsPerPage, filterStartDate, filterEndDate, pageHistory]);\n\n  const handleNextPage = () => {\n    if (hasMore) {\n      setCurrentPage(prevPage => prevPage + 1);\n      setPageHistory(prevHistory => [...prevHistory, lastVisible]);\n    }\n  };\n\n  const handlePreviousPage = () => {\n    if (currentPage > 1) {\n      setCurrentPage(prevPage => prevPage - 1);\n      const newPageHistory = [...pageHistory];\n      newPageHistory.pop();\n      setPageHistory(newPageHistory);\n      setLastVisible(newPageHistory[newPageHistory.length - 1]);\n    }\n  };\n\n  const handleSort = (field) => {\n    if (field === sortField) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortOrder('desc');\n    }\n    setCurrentPage(1);\n    setLastVisible(null);\n    setPageHistory([null]);\n    setHasMore(false);\n  };\n\n  const handleFilter = () => {\n    setDateError(''); // Clear previous errors\n\n    if (!startDateInput && !endDateInput) {\n      setDateError('請至少選擇一個開始或結束日期。');\n      return;\n    }\n\n    if (startDateInput && endDateInput && new Date(startDateInput) > new Date(endDateInput)) {\n      setDateError('開始日期不能晚於結束日期。');\n      return;\n    }\n\n    setFilterStartDate(startDateInput);\n    setFilterEndDate(endDateInput);\n    setCurrentPage(1);\n    setLastVisible(null);\n    setPageHistory([null]);\n    setHasMore(false);\n  };\n\n  const handleClearFilter = () => {\n    setStartDateInput('');\n    setEndDateInput('');\n    setFilterStartDate('');\n    setFilterEndDate('');\n    setDateError(''); // Also clear date error\n    setCurrentPage(1);\n    setLastVisible(null);\n    setPageHistory([null]);\n    setHasMore(false);\n  };\n\n  const handleItemsPerPageChange = (num) => {\n    setItemsPerPage(num);\n    setCurrentPage(1);\n    setLastVisible(null);\n    setPageHistory([null]);\n    setHasMore(false);\n  };\n\n  const handleCustomItemsPerPageSubmit = () => {\n    const num = parseInt(customItemsPerPage, 10);\n    if (num > 0) {\n      handleItemsPerPageChange(num);\n    } else {\n      setDateError('請輸入有效的數字。');\n    }\n  };\n\n  if (authLoading) {\n    return (\n      <Container className=\"mt-5 text-center\">\n        <Spinner animation=\"border\" variant=\"light\" />\n        <p className=\"text-white-50 mt-2\">載入使用者狀態...</p>\n      </Container>\n    );\n  }\n\n  if (loading) {\n    return (\n      <Container className=\"mt-5 text-center\">\n        <Spinner animation=\"border\" variant=\"light\" />\n        <p className=\"text-white-50 mt-2\">載入遊戲紀錄中...</p>\n      </Container>\n    );\n  }\n\n  if (error) {\n    return (\n      <Container className=\"mt-5\">\n        <Alert variant=\"danger\">{error}</Alert>\n      </Container>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Container className=\"mt-5\">\n        <Alert variant=\"info\">請登入以查看您的遊戲紀錄。</Alert>\n      </Container>\n    );\n  }\n\n  if (user.isAnonymous) {\n    return (\n      <Container className=\"mt-5\">\n        <Alert variant=\"info\">您目前以訪客模式登入。如需查看並儲存遊戲紀錄，請使用 Google 帳戶登入。</Alert>\n      </Container>\n    );\n  }\n\n  const totalGamesOverall = userAchievementsData.totalQuizSessions || 0;\n  const highestScore = history.reduce((max, record) => Math.max(max, record.score), 0);\n  const averageScore = history.length > 0 ? (history.reduce((sum, record) => sum + record.score, 0) / history.length).toFixed(2) : 0;\n\n  return (\n    <Container className=\"mt-5 leaderboard-container\">\n      <h2>我的遊戲紀錄</h2>\n      {/* The main container with a unified background */}\n      <div className=\"p-3 rounded mb-3\" style={{ backgroundColor: '#343a40' }}>\n        <Row className=\"align-items-center gy-3\"> {/* gy-3 adds vertical gap on mobile */}\n          {/* Left Column: Stats */}\n          <Col md={6} style={{ color: '#e9ecef' }}>\n            {/* Use a responsive grid for better alignment across all devices */}\n            <Row>\n              <Col xs={12}><p className=\"mb-1\"><strong>總遊戲次數:</strong> {totalGamesOverall}</p></Col>\n              <Col xs={12}><p className=\"mb-1\"><strong>本頁遊戲次數:</strong> {history.length}</p></Col>\n              <Col xs={12}><p className=\"mb-1\"><strong>最高分數 (本頁):</strong> {highestScore}</p></Col>\n              <Col xs={12}><p className=\"mb-0\"><strong>平均分數 (本頁):</strong> {averageScore}</p></Col>\n            </Row>\n          </Col>\n\n          {/* Right Column: Filters - now with a vertical layout */}\n          <Col md={6} className=\"filter-controls\">\n            <div className=\"d-flex flex-column\">\n              {/* Items per page dropdown - full width */}\n              <Dropdown className=\"w-100 mb-2\">\n                <Dropdown.Toggle variant=\"primary\" id=\"dropdown-items-per-page\" size=\"sm\" className=\"w-100\">\n                  每頁顯示: {itemsPerPage}\n                </Dropdown.Toggle>\n                <Dropdown.Menu className=\"w-100\">\n                  <Dropdown.Item onClick={() => handleItemsPerPageChange(10)}>10</Dropdown.Item>\n                  <Dropdown.Item onClick={() => handleItemsPerPageChange(20)}>20</Dropdown.Item>\n                  <Dropdown.Item onClick={() => handleItemsPerPageChange(50)}>50</Dropdown.Item>\n                  <Dropdown.Divider />\n                  <Dropdown.Item as=\"div\" onClick={(e) => e.stopPropagation()}>\n                    <InputGroup size=\"sm\" className=\"p-2\">\n                      <Form.Control\n                        type=\"number\"\n                        placeholder=\"自訂\"\n                        value={customItemsPerPage}\n                        onChange={(e) => setCustomItemsPerPage(e.target.value)}\n                        onKeyPress={(e) => {\n                          if (e.key === 'Enter') handleCustomItemsPerPageSubmit();\n                        }}\n                      />\n                      <Button variant=\"outline-secondary\" onClick={handleCustomItemsPerPageSubmit}>\n                        設定\n                      </Button>\n                    </InputGroup>\n                  </Dropdown.Item>\n                </Dropdown.Menu>\n              </Dropdown>\n\n              {/* Date filters - each on its own line */}\n              <InputGroup size=\"sm\" className=\"mb-2\">\n                <InputGroup.Text>開始</InputGroup.Text>\n                <Form.Control\n                  type=\"date\"\n                  value={startDateInput}\n                  onChange={(e) => setStartDateInput(e.target.value)}\n                  max={new Date().toISOString().split('T')[0]}\n                />\n              </InputGroup>\n              <InputGroup size=\"sm\" className=\"mb-2\">\n                <InputGroup.Text>結束</InputGroup.Text>\n                <Form.Control\n                  type=\"date\"\n                  value={endDateInput}\n                  onChange={(e) => setEndDateInput(e.target.value)}\n                  max={new Date().toISOString().split('T')[0]}\n                />\n              </InputGroup>\n\n              {/* Filter buttons - grouped on one line and aligned to the right */}\n              <div className=\"d-flex justify-content-end\">\n                <Button variant=\"primary\" onClick={handleFilter} className=\"me-2\" size=\"sm\">\n                  篩選\n                </Button>\n                <Button variant=\"outline-secondary\" onClick={handleClearFilter} size=\"sm\">\n                  清除\n                </Button>\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </div>\n      {dateError && (\n        <Alert variant=\"warning\" onClose={() => setDateError('')} dismissible>\n          {dateError}\n        </Alert>\n      )}\n      {history.length === 0 && !loading ? (\n        <Alert variant=\"info\">您還沒有任何遊戲紀錄。</Alert>\n      ) : (\n        <>\n          <Table striped bordered hover responsive variant=\"dark\" style={{ tableLayout: 'fixed', wordWrap: 'break-word' }}>\n            <thead>\n              <tr>\n                <th onClick={() => handleSort('createdAt')} style={{ cursor: 'pointer', width: '25%' }}>\n                  日期 {sortField === 'createdAt' && (sortOrder === 'asc' ? '▲' : '▼')}\n                </th>\n                <th onClick={() => handleSort('score')} style={{ cursor: 'pointer', width: '20%' }}>\n                  分數 {sortField === 'score' && (sortOrder === 'asc' ? '▲' : '▼')}\n                </th>\n                <th style={{ width: '55%' }}>作答結果</th>\n              </tr>\n            </thead>\n            <tbody>\n              {history.map((record) => (\n                <tr key={record.id}>\n                  <td>{record.createdAt?.toDate().toLocaleDateString()}</td>\n                  <td>{record.score}</td>\n                  <td>\n                    <Accordion className=\"quiz-history-accordion\">\n                      <Accordion.Item eventKey=\"0\">\n                        <Accordion.Header>查看詳情</Accordion.Header>\n                        <Accordion.Body>\n                          {record.userAnswers && record.userAnswers.length > 0 ? (\n                            record.userAnswers.map((answer, idx) => (\n                              <div key={idx} className=\"mb-2 p-2 border rounded\">\n                                <p><strong>問題:</strong> {answer.question}</p>\n                                <p><strong>你的答案:</strong> <span style={{ color: answer.isCorrect ? '#28a745' : '#dc3545' }}>\n                                  {answer.userAnswer} {answer.isCorrect ? <FaCheckCircle color=\"#28a745\" /> : <FaTimesCircle color=\"#dc3545\" />}\n                                </span></p>\n                                {!answer.isCorrect && (\n                                  <p><strong>正確答案:</strong> <span style={{ color: '#28a745' }}>{answer.correctAnswer}</span></p>\n                                )}\n                              </div>\n                            ))\n                          ) : (\n                            <p>無詳細作答結果。</p>\n                          )}\n                        </Accordion.Body>\n                      </Accordion.Item>\n                    </Accordion>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n          <div className=\"d-flex justify-content-between mt-3\">\n            {currentPage > 1 && (\n              <Button onClick={handlePreviousPage} disabled={loading} variant=\"secondary\">\n                上一頁\n              </Button>\n            )}\n            {hasMore && (\n              <Button onClick={handleNextPage} disabled={loading} variant=\"secondary\" className=\"ms-auto\">\n                下一頁\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default QuizHistory;"],"names":["InputGroupText","React","_ref","ref","className","bsPrefix","as","Component","props","useBootstrapPrefix","_jsx","classNames","displayName","InputGroup","size","hasValidation","contextValue","useMemo","InputGroupContext","Provider","value","children","Object","assign","Text","Radio","FormCheckInput","type","Checkbox","QuizHistory","user","authLoading","useAuthState","auth","history","setHistory","useState","userAchievementsData","setUserAchievementsData","loading","setLoading","error","setError","dateError","setDateError","sortField","setSortField","sortOrder","setSortOrder","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","lastVisible","setLastVisible","pageHistory","setPageHistory","hasMore","setHasMore","customItemsPerPage","setCustomItemsPerPage","startDateInput","setStartDateInput","endDateInput","setEndDateInput","filterStartDate","setFilterStartDate","filterEndDate","setFilterEndDate","useEffect","async","userAchievementsRef","doc","db","uid","userAchievementsSnap","getSingleDoc","exists","data","baseQuery","collection","q","query","where","startTimestamp","Timestamp","fromDate","Date","endTimestamp","orderBy","startAfter","limit","querySnapshot","getDocs","fetchedHistory","docs","map","id","length","currentItems","slice","err","console","fetchQuizHistory","handleSort","field","handleItemsPerPageChange","num","handleCustomItemsPerPageSubmit","parseInt","_jsxs","Container","Spinner","animation","variant","Alert","isAnonymous","totalGamesOverall","totalQuizSessions","highestScore","reduce","max","record","Math","score","averageScore","sum","toFixed","style","backgroundColor","Row","Col","md","color","xs","Dropdown","Toggle","Menu","Item","onClick","Divider","e","stopPropagation","Form","Control","placeholder","onChange","target","onKeyPress","key","Button","toISOString","split","handleFilter","handleClearFilter","onClose","dismissible","_Fragment","Table","striped","bordered","hover","responsive","tableLayout","wordWrap","cursor","width","_record$createdAt","createdAt","toDate","toLocaleDateString","Accordion","eventKey","Header","Body","userAnswers","answer","idx","question","isCorrect","userAnswer","FaCheckCircle","FaTimesCircle","correctAnswer","handlePreviousPage","prevPage","newPageHistory","pop","disabled","handleNextPage","prevHistory"],"sourceRoot":""}