{"version":3,"file":"static/js/325.e4b3e1ac.chunk.js","mappings":"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","sources":["hooks/useFirestoreCollection.js","components/ChatRoom.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { collection, query, getDocs, onSnapshot } from 'firebase/firestore';\nimport { db } from '../firebase'; // 假設你的 firebase.js 導出了 db\n\nconst useFirestoreCollection = (collectionName, queryConstraints = [], liveUpdate = false) => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    setError(null); // Clear previous errors\n\n    const collectionRef = collection(db, collectionName);\n    let q = query(collectionRef, ...queryConstraints); // 應用傳入的查詢約束\n\n    const fetchData = async () => {\n      try {\n        const querySnapshot = await getDocs(q);\n        const fetchedData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setData(fetchedData);\n        console.log(`useFirestoreCollection: Fetched data from ${collectionName}.`);\n      } catch (err) {\n        console.error(`useFirestoreCollection: Error fetching data from ${collectionName}:`, err);\n        setError(`無法載入 ${collectionName} 資料，請稍後再試。`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    const setupLiveListener = () => {\n      const unsubscribe = onSnapshot(q, (querySnapshot) => {\n        const fetchedData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setData(fetchedData);\n        setLoading(false);\n        setError(null);\n        console.log(`useFirestoreCollection: Live update from ${collectionName}.`);\n      }, (err) => {\n        console.error(`useFirestoreCollection: Live update error for ${collectionName}:`, err);\n        setError(`即時更新 ${collectionName} 資料失敗。`);\n        setLoading(false);\n      });\n      return unsubscribe;\n    };\n\n    let unsubscribe = null;\n    if (liveUpdate) {\n      unsubscribe = setupLiveListener();\n    } else {\n      fetchData();\n    }\n\n    // Cleanup function for useEffect\n    return () => {\n      if (unsubscribe) {\n        unsubscribe(); // Unsubscribe from live listener if it was set up\n      }\n    };\n  }, [collectionName, queryConstraints, liveUpdate]); // 依賴項，當這些改變時重新執行 effect\n\n  return { data, loading, error };\n};\n\nexport default useFirestoreCollection;\n","import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { Container, Form, Button, ListGroup, Spinner, Alert, Badge, Modal } from 'react-bootstrap';\nimport { IoClose } from 'react-icons/io5';\nimport EmojiPicker from 'emoji-picker-react';\nimport { useUser } from '../context/UserContext';\nimport LoadingSpinner from './LoadingSpinner'; // Import LoadingSpinner\nimport useFirestoreCollection from '../hooks/useFirestoreCollection';\nimport { collection, addDoc, serverTimestamp, orderBy, limit, doc, updateDoc, getDoc } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport './ChatRoom.css';\n\nconst RETRACT_TIME_LIMIT = 5 * 60 * 1000; // 5 minutes in milliseconds\n\nconst ChatRoom = () => {\n  const { user, authLoading, updateUserProfile, userAchievements, loading } = useUser();\n  const [newMessage, setNewMessage] = useState('');\n  const [showInputPicker, setShowInputPicker] = useState(false);\n  const [hoveredMessageId, setHoveredMessageId] = useState(null);\n  const [activeReactionPickerId, setActiveReactionPickerId] = useState(null);\n  const messagesEndRef = useRef(null);\n  const messagesAreaRef = useRef(null);\n  const emojiPickerRef = useRef(null); // Ref for emoji picker container\n  const reactionToggleButtonRef = useRef(null); // Ref for the reaction toggle button\n\n  const [showNicknameModal, setShowNicknameModal] = useState(false);\n  const [newNickname, setNewNickname] = useState(user?.displayName || '');\n  const [isUpdatingNickname, setIsUpdatingNickname] = useState(false);\n  const [nicknameUpdateError, setNicknameUpdateError] = useState('');\n\n  const commonEmojis = ['👍', '😲', '🥺'];\n\n  const messagesQueryConstraints = useMemo(() => [orderBy('createdAt', 'desc'), limit(100)], []);\n  const { data: messages, loading: messagesLoading, error } = useFirestoreCollection('messages', messagesQueryConstraints, true);\n\n  const sortedMessages = useMemo(() => messages.slice().reverse(), [messages]);\n\n  const onInputEmojiClick = (emojiObject) => {\n    setNewMessage(prevInput => prevInput + emojiObject.emoji);\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [sortedMessages]);\n\n  useEffect(() => {\n    if (messagesAreaRef.current) {\n      messagesAreaRef.current.scrollTop = messagesAreaRef.current.scrollHeight;\n    }\n  }, [messagesLoading]);\n\n  // Effect to handle click outside for closing emoji picker\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target) &&\n          reactionToggleButtonRef.current && !reactionToggleButtonRef.current.contains(event.target)) {\n        setActiveReactionPickerId(null);\n      }\n    }\n\n    if (activeReactionPickerId) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [activeReactionPickerId]);\n\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n    if (newMessage.trim() === '' || !user) return;\n\n    try {\n      await addDoc(collection(db, 'messages'), {\n        text: newMessage,\n        createdAt: serverTimestamp(),\n        userId: user.uid,\n        userName: user.displayName || '匿名用戶',\n        isRetracted: false,\n        reactions: {}, // Ensure reactions field is created\n      });\n      setNewMessage('');\n    } catch (err) {\n      console.error(\"Error sending message:\", err);\n    }\n  };\n\n  const handleRetractMessage = async (messageId) => {\n    const messageRef = doc(db, 'messages', messageId);\n    try {\n      await updateDoc(messageRef, { isRetracted: true });\n    } catch (err) {\n      console.error(\"Error retracting message:\", err);\n    }\n  };\n\n  const handleReaction = async (messageId, emoji) => {\n    if (!user) return;\n    const messageRef = doc(db, 'messages', messageId);\n\n    try {\n      const docSnap = await getDoc(messageRef);\n      if (docSnap.exists()) {\n        const messageData = docSnap.data();\n        const reactions = messageData.reactions || {};\n        const reactionUsers = reactions[emoji] || [];\n\n        if (reactionUsers.includes(user.uid)) {\n          reactions[emoji] = reactionUsers.filter(id => id !== user.uid);\n          if (reactions[emoji].length === 0) {\n            delete reactions[emoji];\n          }\n        } else {\n          reactions[emoji] = [...reactionUsers, user.uid];\n        }\n\n        await updateDoc(messageRef, { reactions });\n      }\n    } catch (err) {\n      console.error(\"Error handling reaction:\", err);\n    }\n    setActiveReactionPickerId(null);\n  };\n\n  const handleUpdateNickname = async (e) => {\n    e.preventDefault();\n    setNicknameUpdateError('');\n    setIsUpdatingNickname(true);\n\n    try {\n      await updateUserProfile(newNickname);\n      setShowNicknameModal(false);\n    } catch (error) {\n      setNicknameUpdateError(error.message);\n    } finally {\n      setIsUpdatingNickname(false);\n    }\n  };\n\n  const handleResetNickname = async () => {\n    setNicknameUpdateError('');\n    setIsUpdatingNickname(true);\n\n    try {\n      if (!user || !userAchievements || !userAchievements.initialDisplayName) {\n        throw new Error(\"很抱歉暫時無法取得初始暱稱。請先自行手動修改。\");\n      }\n      const initialNickname = userAchievements.initialDisplayName;\n      await updateUserProfile(initialNickname);\n      setShowNicknameModal(false);\n    } catch (error) {\n      setNicknameUpdateError(error.message);\n    } finally {\n      setIsUpdatingNickname(false);\n    }\n  };\n\n  if (authLoading) {\n    return (\n      <Container className=\"mt-5 text-center\">\n        <LoadingSpinner />\n        <p className=\"mt-3\">載入使用者狀態...</p>\n      </Container>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Container className=\"mt-5\">\n        <Alert variant=\"warning\">請先登入才能使用聊天室。</Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container className=\"mt-5 chat-container\">\n      <div className=\"d-flex justify-content-between align-items-center mb-3\">\n        <h2 className=\"mb-0\">粉絲聊天室</h2>\n        {user && !user.isAnonymous && (\n          <Button variant=\"outline-info\" size=\"sm\" onClick={() => {\n            setNewNickname(user.displayName || '');\n            setNicknameUpdateError('');\n            setShowNicknameModal(true);\n          }}>\n            修改暱稱\n          </Button>\n        )}\n      </div>\n      <div className=\"messages-area\" ref={messagesAreaRef}>\n        {loading && <Spinner animation=\"border\" />}\n        {error && <Alert variant=\"danger\">無法載入訊息：{error.message}</Alert>}\n        <ListGroup>\n          {sortedMessages.map((msg) => (\n            <ListGroup.Item\n              key={msg.id}\n              className={`message-item ${msg.userId === user.uid ? 'sent' : 'received'}`}\n              onMouseEnter={() => setHoveredMessageId(msg.id)}\n              onMouseLeave={() => setHoveredMessageId(null)}\n            >\n              <div className=\"message-content\">\n                {msg.isRetracted ? (\n                  <em className=\"retracted-message\">訊息已收回</em>\n                ) : (\n                  <>\n                    <strong className=\"message-user\">{msg.userName}</strong>\n                    <div className=\"message-text\">{msg.text}</div>\n                    <small className=\"message-time\">\n                      {msg.createdAt?.toDate().toLocaleTimeString()}\n                    </small>\n                    \n                    <div className={`message-toolbar ${msg.userId === user.uid ? 'sent' : 'received'}`}>\n                      {(hoveredMessageId === msg.id || activeReactionPickerId === msg.id) && (\n                        <>\n                          <Button variant=\"link\" className=\"reaction-button\" onClick={() => setActiveReactionPickerId(activeReactionPickerId === msg.id ? null : msg.id)} ref={reactionToggleButtonRef}>...</Button>\n                          {msg.userId === user.uid && (Date.now() - msg.createdAt?.toDate().getTime() < RETRACT_TIME_LIMIT) && (\n                            <Button variant=\"link\" className=\"retract-button\" onClick={() => handleRetractMessage(msg.id)}>收回</Button>\n                          )}\n                        </>\n                      )}\n                    </div>\n\n                    {hoveredMessageId === msg.id && (\n                      <div className={`quick-reactions-container ${msg.userId === user.uid ? 'sent' : 'received'}`}>\n                        {commonEmojis.map(emoji => (\n                          <Button \n                            key={emoji} \n                            variant=\"link\" \n                            className=\"quick-reaction-button\"\n                            onClick={() => handleReaction(msg.id, emoji)}\n                          >\n                            {emoji}\n                          </Button>\n                        ))}\n                      </div>\n                    )}\n\n                    {activeReactionPickerId === msg.id && (\n                      <div className={`picker-container-absolute ${msg.userId === user.uid ? 'sent-picker' : 'received-picker'}`} ref={emojiPickerRef}> {/* Add ref here */}\n                        <EmojiPicker \n                          onEmojiClick={(e) => handleReaction(msg.id, e.emoji)}\n                          pickerStyle={msg.userId === user.uid ? { right: '0px' } : { left: '0px' }}\n                        />\n                      </div>\n                    )}\n\n                    <div className=\"reactions-display\">\n                      {Object.entries(msg.reactions || {}).map(([emoji, users]) => (\n                        users.length > 0 && (\n                          <Badge \n                            key={emoji} \n                            pill \n                            bg={users.includes(user.uid) ? \"primary\" : \"secondary\"}\n                            className=\"reaction-badge\"\n                            onClick={() => handleReaction(msg.id, emoji)}\n                          >\n                            {emoji} {users.length}\n                          </Badge>\n                        )\n                      ))}\n                    </div>\n                  </>\n                )}\n              </div>\n            </ListGroup.Item>\n          ))}\n          <div ref={messagesEndRef} />\n        </ListGroup>\n      </div>\n      <div className=\"input-picker-container\">\n        {showInputPicker && (\n          <>\n            <EmojiPicker onEmojiClick={onInputEmojiClick} />\n            <Button variant=\"secondary\" onClick={() => setShowInputPicker(false)} className=\"mt-2 emoji-close-button\">\n              <IoClose />\n            </Button>\n          </>\n        )}\n      </div>\n      <Form onSubmit={handleSendMessage} className=\"message-form\">\n        <Form.Control\n          type=\"text\"\n          value={newMessage}\n          onChange={(e) => setNewMessage(e.target.value)}\n          placeholder=\"輸入訊息...\"\n          autoComplete=\"off\"\n        />\n        <Button variant=\"light\" onClick={() => setShowInputPicker(val => !val)} className=\"emoji-button\">😊</Button>\n        <Button variant=\"primary\" type=\"submit\" className=\"btn-theme-gradient\">\n          傳送\n        </Button>\n      </Form>\n\n      {/* Nickname Edit Modal */}\n      <Modal show={showNicknameModal} onHide={() => setShowNicknameModal(false)} centered>\n        <Modal.Header closeButton className=\"bg-dark text-white\">\n          <Modal.Title>修改聊天室暱稱</Modal.Title>\n        </Modal.Header>\n        <Modal.Body className=\"bg-dark text-white\">\n          <Form onSubmit={handleUpdateNickname}>\n            <Form.Group className=\"mb-3\">\n              <Form.Label>新暱稱</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"輸入新暱稱\"\n                value={newNickname}\n                onChange={(e) => setNewNickname(e.target.value)}\n                isInvalid={!!nicknameUpdateError}\n                disabled={isUpdatingNickname}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {nicknameUpdateError}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <div className=\"d-flex justify-content-end\">\n              <Button variant=\"secondary\" onClick={() => setShowNicknameModal(false)} disabled={isUpdatingNickname} className=\"me-2\">\n                取消\n              </Button>\n              <Button variant=\"outline-warning\" onClick={handleResetNickname} disabled={isUpdatingNickname || loading} className=\"me-2\">\n                初始暱稱\n              </Button>\n              <Button variant=\"primary\" type=\"submit\" disabled={isUpdatingNickname}>\n                {isUpdatingNickname ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" /> : '儲存變更'}\n              </Button>\n            </div>\n          </Form>\n        </Modal.Body>\n      </Modal>\n    </Container>\n  );\n};\n\nexport default ChatRoom;\n"],"names":["collectionName","queryConstraints","arguments","length","undefined","liveUpdate","data","setData","useState","loading","setLoading","error","setError","useEffect","collectionRef","collection","db","q","query","unsubscribe","onSnapshot","querySnapshot","fetchedData","docs","map","doc","id","console","log","err","async","getDocs","fetchData","ChatRoom","user","authLoading","updateUserProfile","userAchievements","useUser","newMessage","setNewMessage","showInputPicker","setShowInputPicker","hoveredMessageId","setHoveredMessageId","activeReactionPickerId","setActiveReactionPickerId","messagesEndRef","useRef","messagesAreaRef","emojiPickerRef","reactionToggleButtonRef","showNicknameModal","setShowNicknameModal","newNickname","setNewNickname","displayName","isUpdatingNickname","setIsUpdatingNickname","nicknameUpdateError","setNicknameUpdateError","commonEmojis","messagesQueryConstraints","useMemo","orderBy","limit","messages","messagesLoading","useFirestoreCollection","sortedMessages","slice","reverse","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","scrollTop","scrollHeight","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","handleReaction","messageId","emoji","messageRef","docSnap","getDoc","exists","reactions","reactionUsers","includes","uid","filter","updateDoc","_jsxs","Container","className","children","_jsx","LoadingSpinner","isAnonymous","Button","variant","size","onClick","ref","Spinner","animation","Alert","message","ListGroup","msg","_msg$createdAt","_msg$createdAt2","Item","userId","onMouseEnter","onMouseLeave","isRetracted","_Fragment","userName","text","createdAt","toDate","toLocaleTimeString","Date","now","getTime","handleRetractMessage","EmojiPicker","onEmojiClick","e","pickerStyle","right","left","Object","entries","_ref","users","Badge","pill","bg","emojiObject","prevInput","IoClose","Form","onSubmit","preventDefault","trim","addDoc","serverTimestamp","Control","type","value","onChange","placeholder","autoComplete","val","Modal","show","onHide","centered","Header","closeButton","Title","Body","Group","Label","isInvalid","disabled","Feedback","initialDisplayName","Error","initialNickname","as","role"],"sourceRoot":""}