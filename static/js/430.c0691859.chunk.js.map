{"version":3,"file":"static/js/430.c0691859.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/InputGroupText.js","../node_modules/react-bootstrap/esm/InputGroup.js","components/QuizHistory.js"],"sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nInputGroupText.displayName = 'InputGroupText';\nexport default InputGroupText;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport InputGroupText from './InputGroupText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n\n  // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});","import React, { useState, useEffect } from 'react';\nimport { db, auth } from '../firebase';\nimport { collection, query, where, orderBy, getDocs, limit, startAfter, doc, getDoc as getSingleDoc } from 'firebase/firestore';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { Container, Spinner, Alert, Table, Accordion, Button, Dropdown, Form, InputGroup } from 'react-bootstrap';\nimport { FaCheckCircle, FaTimesCircle } from 'react-icons/fa';\nimport './QuizHistory.css';\n\nconst QuizHistory = () => {\n  const [user, authLoading] = useAuthState(auth);\n  const [history, setHistory] = useState([]);\n  const [userAchievementsData, setUserAchievementsData] = useState({}); // New state for user achievements\n  const [loading, setLoading] = useState(true); // For fetching quiz history data\n  const [error, setError] = useState(null);\n  const [sortField, setSortField] = useState('createdAt'); // Default sort field\n  const [sortOrder, setSortOrder] = useState('desc'); // Default sort order\n\n  // Pagination states\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(10); // Number of items per page\n  const [lastVisible, setLastVisible] = useState(null); // Last document of the current page\n  const [pageHistory, setPageHistory] = useState([null]); // To store lastVisible for previous pages\n  const [hasMore, setHasMore] = useState(false); // Indicates if there's a next page\n  const [customItemsPerPage, setCustomItemsPerPage] = useState(''); // For custom input\n\n  // Effect to reset pagination when user logs in/out\n  useEffect(() => {\n    if (user) {\n      // User logged in or changed, reset pagination to first page\n      setCurrentPage(1);\n      setLastVisible(null);\n      setPageHistory([null]);\n      setHasMore(false);\n      setError(null); // Clear any previous errors\n    } else {\n      // User logged out, clear history and reset states\n      setHistory([]);\n      setLoading(false); // Ensure loading is false when logged out\n      setError(\"請先登入以查看遊戲紀錄。\");\n      setCurrentPage(1);\n      setLastVisible(null);\n      setPageHistory([null]);\n      setHasMore(false);\n    }\n  }, [user]); // Only depends on user\n\n  // Main effect to fetch quiz history\n  useEffect(() => {\n    const fetchQuizHistory = async () => {\n      if (authLoading) {\n        // Still authenticating, don't fetch yet.\n        return;\n      }\n\n      if (!user) {\n        // User is not logged in (handled by the separate useEffect above), so just return.\n        // The UI will show \"請先登入...\"\n        return;\n      }\n\n      setLoading(true); // Start loading for data fetch\n\n      try {\n        // Fetch user achievements for total quizzes answered\n        const userAchievementsRef = doc(db, \"userAchievements\", user.uid);\n        const userAchievementsSnap = await getSingleDoc(userAchievementsRef);\n        if (userAchievementsSnap.exists()) {\n          setUserAchievementsData(userAchievementsSnap.data());\n        } else {\n          setUserAchievementsData({});\n        }\n\n        let q;\n        if (pageHistory[currentPage - 1] === null) { // First page or going back to a page without a startAfter doc\n          q = query(\n            collection(db, \"scores\"),\n            where(\"userId\", \"==\", user.uid),\n            orderBy(sortField, sortOrder),\n            limit(itemsPerPage + 1) // Fetch one more to check if there's a next page\n          );\n        } else {\n          // For subsequent pages, use startAfter\n          q = query(\n            collection(db, \"scores\"),\n            where(\"userId\", \"==\", user.uid),\n            orderBy(sortField, sortOrder),\n            startAfter(pageHistory[currentPage - 1]), // Start after the last document of the previous page\n            limit(itemsPerPage + 1)\n          );\n        }\n\n        const querySnapshot = await getDocs(q);\n        const fetchedHistory = [];\n        querySnapshot.forEach(doc => {\n          fetchedHistory.push({ id: doc.id, ...doc.data() });\n        });\n\n        // Determine if there's a next page\n        setHasMore(fetchedHistory.length > itemsPerPage);\n\n        // Slice the array to get only the items for the current page\n        const currentItems = fetchedHistory.slice(0, itemsPerPage);\n        setHistory(currentItems);\n\n        // Update lastVisible for pagination\n        setLastVisible(querySnapshot.docs[currentItems.length - 1]);\n\n      } catch (err) {\n        console.error(\"Error fetching quiz history:\", err);\n        setError(\"無法載入遊戲紀錄，請稍後再試。\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchQuizHistory();\n\n  }, [user, authLoading, sortField, sortOrder, currentPage, itemsPerPage, pageHistory]);\n\n  const handleNextPage = () => {\n    if (hasMore) {\n      setCurrentPage(prevPage => prevPage + 1);\n      setPageHistory(prevHistory => [...prevHistory, lastVisible]); // Store lastVisible for current page\n    }\n  };\n\n  const handlePreviousPage = () => {\n    if (currentPage > 1) {\n      setCurrentPage(prevPage => prevPage - 1);\n      const newPageHistory = [...pageHistory];\n      newPageHistory.pop(); // Remove the current page's lastVisible\n      setPageHistory(newPageHistory);\n      setLastVisible(newPageHistory[newPageHistory.length - 1]); // Set lastVisible to the one for the previous page\n    }\n  };\n\n  const handleSort = (field) => {\n    if (field === sortField) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortOrder('desc'); // Default to descending when changing sort field\n    }\n    // Reset pagination when sort changes\n    setCurrentPage(1);\n    setLastVisible(null);\n    setPageHistory([null]);\n    setHasMore(false);\n  };\n\n  const handleItemsPerPageChange = (num) => {\n    setItemsPerPage(num);\n    // Reset pagination when items per page changes\n    setCurrentPage(1);\n    setLastVisible(null);\n    setPageHistory([null]);\n    setHasMore(false);\n  };\n\n  const handleCustomItemsPerPageSubmit = () => {\n    const num = parseInt(customItemsPerPage, 10);\n    if (num > 0) {\n      handleItemsPerPageChange(num);\n    } else {\n      alert('請輸入有效的數字。');\n    }\n  };\n\n  if (authLoading) {\n    return (\n      <Container className=\"mt-5 text-center\">\n        <Spinner animation=\"border\" variant=\"light\" />\n        <p className=\"text-white-50 mt-2\">載入使用者狀態...</p>\n      </Container>\n    );\n  }\n\n  if (loading) {\n    return (\n      <Container className=\"mt-5 text-center\">\n        <Spinner animation=\"border\" variant=\"light\" />\n        <p className=\"text-white-50 mt-2\">載入遊戲紀錄中...</p>\n      </Container>\n    );\n  }\n\n  if (error) {\n    return (\n      <Container className=\"mt-5\">\n        <Alert variant=\"danger\">{error}</Alert>\n      </Container>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Container className=\"mt-5\">\n        <Alert variant=\"info\">請登入以查看您的遊戲紀錄。</Alert>\n      </Container>\n    );\n  }\n\n  if (user.isAnonymous) {\n    return (\n      <Container className=\"mt-5\">\n        <Alert variant=\"info\">您目前以訪客模式登入。如需查看並儲存遊戲紀錄，請使用 Google 帳戶登入。</Alert>\n      </Container>\n    );\n  }\n\n  // Calculate statistics\n  const totalGamesOverall = userAchievementsData.totalQuizSessions || 0; // Use total quiz sessions from achievements\n  const highestScore = history.reduce((max, record) => Math.max(max, record.score), 0);\n  const averageScore = history.length > 0 ? (history.reduce((sum, record) => sum + record.score, 0) / history.length).toFixed(2) : 0;\n\n  return (\n    <Container className=\"mt-5 leaderboard-container\">\n      <h2>我的遊戲紀錄</h2>\n      <div className=\"d-flex justify-content-between align-items-center mb-3\">\n        <div className=\"mb-4 p-3 rounded\" style={{ backgroundColor: '#343a40', color: '#e9ecef' }}>\n          <p><strong>總遊戲次數:</strong> {totalGamesOverall}</p>\n          <p><strong>本頁遊戲次數:</strong> {history.length}</p>\n          <p><strong>最高分數 (本頁):</strong> {highestScore}</p>\n          <p><strong>平均分數 (本頁):</strong> {averageScore}</p>\n        </div>\n        <Dropdown className=\"ms-auto\">\n          <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-items-per-page\">\n            每頁顯示: {itemsPerPage}\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            <Dropdown.Item onClick={() => handleItemsPerPageChange(10)}>10</Dropdown.Item>\n            <Dropdown.Item onClick={() => handleItemsPerPageChange(20)}>20</Dropdown.Item>\n            <Dropdown.Item onClick={() => handleItemsPerPageChange(50)}>50</Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item as=\"div\" onClick={(e) => e.stopPropagation()}>\n              <InputGroup className=\"p-2\">\n                <Form.Control\n                  type=\"number\"\n                  placeholder=\"自訂\"\n                  value={customItemsPerPage}\n                  onChange={(e) => setCustomItemsPerPage(e.target.value)}\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter') {\n                      handleCustomItemsPerPageSubmit();\n                    }\n                  }}\n                />\n                <Button variant=\"outline-secondary\" onClick={handleCustomItemsPerPageSubmit}>\n                  設定\n                </Button>\n              </InputGroup>\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </div>\n      {history.length === 0 ? (\n        <Alert variant=\"info\">您還沒有任何遊戲紀錄。</Alert>\n      ) : (\n        <>\n          <Table striped bordered hover responsive variant=\"dark\">\n            <thead>\n              <tr>\n                <th onClick={() => handleSort('createdAt')} style={{ cursor: 'pointer' }}>\n                  日期 {sortField === 'createdAt' && (sortOrder === 'asc' ? '▲' : '▼')}\n                </th>\n                <th onClick={() => handleSort('score')} style={{ cursor: 'pointer' }}>\n                  分數 {sortField === 'score' && (sortOrder === 'asc' ? '▲' : '▼')}\n                </th>\n                <th>作答結果</th>\n              </tr>\n            </thead>\n            <tbody>\n              {history.map((record) => (\n                <tr key={record.id}>\n                  <td>{record.createdAt?.toDate().toLocaleDateString()}</td>\n                  <td>{record.score}</td>\n                  <td>\n                    <Accordion className=\"quiz-history-accordion\">\n                      <Accordion.Item eventKey=\"0\">\n                        <Accordion.Header>查看詳情</Accordion.Header>\n                        <Accordion.Body>\n                          {record.userAnswers && record.userAnswers.length > 0 ? (\n                            record.userAnswers.map((answer, idx) => (\n                              <div key={idx} className=\"mb-2 p-2 border rounded\">\n                                <p><strong>問題:</strong> {answer.question}</p>\n                                <p><strong>你的答案:</strong> <span style={{ color: answer.isCorrect ? '#28a745' : '#dc3545' }}>\n                                  {answer.userAnswer} {answer.isCorrect ? <FaCheckCircle color=\"#28a745\" /> : <FaTimesCircle color=\"#dc3545\" />}\n                                </span></p>\n                                {!answer.isCorrect && (\n                                  <p><strong>正確答案:</strong> <span style={{ color: '#28a745' }}>{answer.correctAnswer}</span></p>\n                                )}\n                              </div>\n                            ))\n                          ) : (\n                            <p>無詳細作答結果。</p>\n                          )}\n                        </Accordion.Body>\n                      </Accordion.Item>\n                    </Accordion>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n          <div className=\"d-flex justify-content-between mt-3\">\n            {currentPage > 1 && (\n              <Button onClick={handlePreviousPage} disabled={loading} variant=\"secondary\">\n                上一頁\n              </Button>\n            )}\n            {hasMore && (\n              <Button onClick={handleNextPage} disabled={loading} variant=\"secondary\" className=\"ms-auto\">\n                下一頁\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default QuizHistory;"],"names":["InputGroupText","React","_ref","ref","className","bsPrefix","as","Component","props","useBootstrapPrefix","_jsx","classNames","displayName","InputGroup","size","hasValidation","contextValue","useMemo","InputGroupContext","Provider","value","children","Object","assign","Text","Radio","FormCheckInput","type","Checkbox","QuizHistory","user","authLoading","useAuthState","auth","history","setHistory","useState","userAchievementsData","setUserAchievementsData","loading","setLoading","error","setError","sortField","setSortField","sortOrder","setSortOrder","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","lastVisible","setLastVisible","pageHistory","setPageHistory","hasMore","setHasMore","customItemsPerPage","setCustomItemsPerPage","useEffect","async","userAchievementsRef","doc","db","uid","userAchievementsSnap","getSingleDoc","q","exists","data","query","collection","where","orderBy","limit","startAfter","querySnapshot","getDocs","fetchedHistory","forEach","push","id","length","currentItems","slice","docs","err","console","fetchQuizHistory","handleSort","field","handleItemsPerPageChange","num","handleCustomItemsPerPageSubmit","parseInt","alert","_jsxs","Container","Spinner","animation","variant","Alert","isAnonymous","totalGamesOverall","totalQuizSessions","highestScore","reduce","max","record","Math","score","averageScore","sum","toFixed","style","backgroundColor","color","Dropdown","Toggle","Menu","Item","onClick","Divider","e","stopPropagation","Form","Control","placeholder","onChange","target","onKeyPress","key","Button","_Fragment","Table","striped","bordered","hover","responsive","cursor","map","_record$createdAt","createdAt","toDate","toLocaleDateString","Accordion","eventKey","Header","Body","userAnswers","answer","idx","question","isCorrect","userAnswer","FaCheckCircle","FaTimesCircle","correctAnswer","handlePreviousPage","prevPage","newPageHistory","pop","disabled","handleNextPage","prevHistory"],"sourceRoot":""}