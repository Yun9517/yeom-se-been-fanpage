{"version":3,"file":"static/js/580.5392caa9.chunk.js","mappings":"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","sources":["components/Leaderboard.js","components/FanQuiz.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { db, auth } from '../firebase';\nimport { collection, query, orderBy, onSnapshot } from 'firebase/firestore';\nimport { Table, Button, Form } from 'react-bootstrap';\nimport { FaTrophy } from 'react-icons/fa';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport './Leaderboard.css';\n\nconst Leaderboard = () => {\n  const [allScores, setAllScores] = useState([]); // Stores all scores fetched\n  const [scores, setScores] = useState([]); // Scores for current page\n  // eslint-disable-next-line no-unused-vars\n  const [currentUser] = useAuthState(auth);\n  const [loading, setLoading] = useState(true); // Loading state\n  const [pageSize, setPageSize] = useState(10); // User customizable page size\n  const [currentPage, setCurrentPage] = useState(1); // Current page number\n\n  useEffect(() => {\n    setLoading(true);\n    const scoresCollection = collection(db, 'scores');\n    const q = query(scoresCollection, orderBy('score', 'desc'));\n\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\n      const fetchedScores = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      setAllScores(fetchedScores);\n      setLoading(false);\n    }, (error) => {\n      console.error(\"Error fetching scores:\", error);\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  useEffect(() => {\n    // Update scores for current page whenever allScores or pageSize changes\n    const startIndex = (currentPage - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    setScores(allScores.slice(startIndex, endIndex));\n  }, [allScores, currentPage, pageSize]);\n\n  const totalPages = Math.ceil(allScores.length / pageSize);\n\n  const handleNextPage = () => {\n    if (currentPage < totalPages) {\n      setCurrentPage(prev => prev + 1);\n    }\n  };\n\n  const handlePrevPage = () => {\n    if (currentPage > 1) {\n      setCurrentPage(prev => prev - 1);\n    }\n  };\n\n  const handlePageSizeChange = (e) => {\n    setPageSize(Number(e.target.value));\n    setCurrentPage(1); // Reset to first page when page size changes\n  };\n\n  const getRankClass = (index) => {\n    // Adjust index for current page\n    const globalIndex = (currentPage - 1) * pageSize + index;\n    if (globalIndex === 0) return 'rank-gold';\n    if (globalIndex === 1) return 'rank-silver';\n    if (globalIndex === 2) return 'rank-bronze';\n    return '';\n  };\n\n  return (\n    <div className=\"leaderboard-container mt-5\">\n      <Form.Group controlId=\"pageSizeSelect\" className=\"mb-3\">\n        <Form.Label>每頁顯示筆數:</Form.Label>\n        <Form.Control as=\"select\" value={pageSize} onChange={handlePageSizeChange}>\n          <option value={10}>10</option>\n          <option value={20}>20</option>\n          <option value={50}>50</option>\n          <option value={100}>100</option>\n        </Form.Control>\n      </Form.Group>\n      <Table striped bordered hover responsive variant=\"dark\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>玩家</th>\n            <th>分數</th>\n            <th>日期</th>\n          </tr>\n        </thead>\n        <tbody>\n          {loading ? (\n            <tr>\n              <td colSpan=\"4\" className=\"text-center\">載入中...</td>\n            </tr>\n          ) : (\n            scores.map((score, index) => (\n              <tr\n                key={score.id}\n                className={`${getRankClass( (currentPage - 1) * pageSize + index )} ${currentUser && score.userId === currentUser.uid ? 'current-user-row' : ''}`}\n              >\n                <td className=\"rank-cell\">\n                  {(currentPage - 1) * pageSize + index + 1 <= 3 ? (\n                    <FaTrophy className=\"trophy-icon\" />\n                  ) : (\n                    (currentPage - 1) * pageSize + index + 1\n                  )}\n                </td>\n                <td>{score.userName}</td>\n                <td>{score.score}</td>\n                <td>{new Date(score.createdAt?.toDate()).toLocaleDateString()}</td>\n              </tr>\n            ))\n          )}\n        </tbody>\n      </Table>\n      <div className=\"d-flex justify-content-between mt-3\">\n        {currentPage > 1 && (\n          <Button onClick={handlePrevPage} disabled={loading} variant=\"secondary\">上一頁</Button>\n        )}\n        {currentPage < totalPages && (\n          <Button onClick={handleNextPage} disabled={loading} variant=\"secondary\">下一頁</Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Leaderboard;","import React, { useState, useEffect, useCallback } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { FiRefreshCcw, FiLink } from 'react-icons/fi';\nimport { FaLine } from 'react-icons/fa';\nimport { Spinner, Alert, Accordion } from 'react-bootstrap'; // Import Accordion\nimport './FanQuiz.css';\n\nimport { db, auth } from '../firebase';\nimport { collection, getDocs, addDoc, serverTimestamp, setDoc, doc, getDoc } from 'firebase/firestore';\nimport { useAuthState } from 'react-firebase-hooks/auth';\n\nimport Leaderboard from './Leaderboard';\n\n// Helper function to get random questions\nconst getRandomQuestions = (allQuestions, num = 5) => {\n  const shuffled = [...allQuestions].sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, num);\n};\n\nfunction FanQuiz() {\n  const [masterQuestions, setMasterQuestions] = useState([]);\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [user] = useAuthState(auth);\n\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, \"quizzes\"));\n        const fetchedQuestions = querySnapshot.docs.map(doc => doc.data());\n        setMasterQuestions(fetchedQuestions);\n        setQuestions(getRandomQuestions(fetchedQuestions));\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error fetching questions from Firestore:\", err);\n        setError(\"無法載入題目，請稍後再試。\");\n        setLoading(false);\n      }\n    };\n    fetchQuestions();\n  }, []);\n\n  useEffect(() => {\n    const saveScore = async () => {\n      if (showScore && user && !user.isAnonymous) { // Only save score if user is logged in and not anonymous\n        try {\n          await addDoc(collection(db, \"scores\"), {\n            userName: user.displayName,\n            userId: user.uid,\n            score: score,\n            userAnswers: userAnswers, // Add userAnswers here\n            createdAt: serverTimestamp()\n          });\n        } catch (e) {\n          console.error(\"Error adding document: \", e);\n        }\n      }\n    };\n\n    saveScore();\n  }, [showScore, user, score, userAnswers]);\n\n  const checkAndUnlockAchievements = useCallback(async () => {\n    if (!user || user.isAnonymous) return; // Only check for logged-in users\n\n    const userAchievementsRef = doc(db, \"userAchievements\", user.uid);\n    const userAchievementsSnap = await getDoc(userAchievementsRef);\n    const userAchievements = userAchievementsSnap.exists() ? userAchievementsSnap.data() : {};\n\n    // Achievement: 首次作答全對\n    if (score === questions.length && !userAchievements.firstPerfectScore) {\n      await setDoc(userAchievementsRef, {\n        firstPerfectScore: true,\n        firstPerfectScoreDate: serverTimestamp()\n      }, { merge: true });\n      alert(\"恭喜！您解鎖了 [首次作答全對] 成就！\");\n    }\n\n    // Achievement: 首次全錯\n    if (score === 0 && !userAchievements.firstAllWrong) {\n      await setDoc(userAchievementsRef, {\n        firstAllWrong: true,\n        firstAllWrongDate: serverTimestamp()\n      }, { merge: true });\n      alert(\"恭喜！您解鎖了 [首次全錯] 成就！\");\n    }\n  }, [user, score, questions.length]);\n\n  useEffect(() => {\n    if (showScore && user && !user.isAnonymous) {\n      checkAndUnlockAchievements();\n    }\n  }, [showScore, user, checkAndUnlockAchievements]);\n\n  const handleAnswerOptionClick = (selectedOption) => {\n    const currentQ = questions[currentQuestion];\n    const isCorrect = selectedOption === currentQ.answer;\n\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    setUserAnswers(prevAnswers => [\n      ...prevAnswers,\n      {\n        question: currentQ.question,\n        correctAnswer: currentQ.answer,\n        userAnswer: selectedOption,\n        isCorrect: isCorrect,\n      },\n    ]);\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  const resetQuiz = useCallback(() => {\n    setCurrentQuestion(0);\n    setScore(0);\n    setShowScore(false);\n    setQuestions(getRandomQuestions(masterQuestions));\n    setUserAnswers([]);\n  }, [masterQuestions]);\n\n  const generateShareContent = () => {\n    const shareText = `我在 염세빈 粉絲小遊戲中獲得了 ${score} 分！快來挑戰看看你的分數！`;\n    const shareUrl = window.location.href;\n    return { shareText, shareUrl };\n  };\n\n  const handleShareLink = () => {\n    const { shareText, shareUrl } = generateShareContent();\n    const fullShareLink = `${shareText} ${shareUrl}`;\n    navigator.clipboard.writeText(fullShareLink).then(() => {\n      alert('分享連結已複製到剪貼簿！');\n    }).catch(err => {\n      console.error('無法複製分享連結:', err);\n    });\n  };\n\n  const handleShareLine = () => {\n    const { shareText, shareUrl } = generateShareContent();\n    const lineMessage = `${shareText} ${shareUrl}`;\n    const lineShareUrl = `https://line.me/R/msg/text/?${encodeURIComponent(lineMessage)}`;\n    window.open(lineShareUrl, '_blank');\n  };\n\n  const ogImageUrl = `yeomsebeen_field.jpg`;\n\n  return (\n    <>\n      <Helmet>\n        <title>염세빈 粉絲小遊戲！</title>\n        <meta property=\"og:title\" content=\"염세빈 粉絲小遊戲！\" />\n        <meta property=\"og:description\" content=\"快來挑戰看看你對廉世彬的了解程度！\" />\n        <meta property=\"og:image\" content={`https://storage.googleapis.com/yeom-se-been-fanpage-assets/${ogImageUrl}`} />\n        <meta property=\"og:url\" content={window.location.href} />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:image\" content={`https://storage.googleapis.com/yeom-se-been-fanpage-assets/${ogImageUrl}`} />\n      </Helmet>\n      <div className=\"fan-quiz-container\">\n        <h2>염세빈 粉絲小遊戲！</h2>\n\n        {loading && (\n          <div className=\"text-center\">\n            <Spinner animation=\"border\" variant=\"light\" />\n            <p className=\"text-white-50 mt-2\">載入中...</p>\n          </div>\n        )}\n        {error && <Alert variant=\"danger\">{error}</Alert>}\n\n        {!loading && !error && (\n          showScore ? (\n            <div className=\"score-section\">\n              <div className=\"score-text\">你獲得了 {score} 分，總分 {questions.length} 分！</div>\n              {user && user.isAnonymous && (\n                <Alert variant=\"info\" className=\"mt-3\" style={{ fontSize: '0.85em' }}>您的作答結果不會進入排行榜。如需記錄分數，請使用 Google 帳戶登入。</Alert>\n              )}\n              <div className=\"score-buttons\">\n                <button onClick={handleShareLink} className=\"quiz-button share-link-button\"><FiLink /></button>\n                <button onClick={resetQuiz} className=\"quiz-button play-again-button\"><FiRefreshCcw /></button>\n                <button onClick={handleShareLine} className=\"quiz-button share-line-button\"><FaLine /></button>\n              </div>\n\n              <div className=\"quiz-answers-summary mt-4\">\n                <h3>作答結果</h3>\n                {userAnswers.map((item, index) => (\n                  <div key={index} className=\"answer-item mb-3 p-3 border rounded\">\n                    <p><strong>問題 {index + 1}:</strong> {item.question}</p>\n                    <p><strong>你的答案:</strong> <span style={{ color: item.isCorrect ? '#28a745' : '#dc3545' }}>{item.userAnswer}</span></p>\n                    {!item.isCorrect && (\n                      <p><strong>正確答案:</strong> <span style={{ color: '#28a745' }}>{item.correctAnswer}</span></p>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          ) : (\n            questions.length > 0 && (\n              <div className=\"question-section\">\n                <div className=\"question-count\">\n                  <span>問題 {currentQuestion + 1}</span>/{questions.length}\n                </div>\n                <div className=\"question-text\">\n                  {questions[currentQuestion]?.question}\n                </div>\n                <div className=\"answer-section\">\n                  {questions[currentQuestion]?.options.map((option, index) => (\n                    <button key={`${currentQuestion}-${index}`} onClick={() => handleAnswerOptionClick(option)}>\n                      {option}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )\n          )\n        )}\n      </div>\n\n      <div className=\"leaderboard-section mt-5\">\n        <Accordion defaultActiveKey=\"0\">\n          <Accordion.Item eventKey=\"0\">\n            <Accordion.Header>排行榜</Accordion.Header>\n            <Accordion.Body>\n              <Leaderboard />\n            </Accordion.Body>\n          </Accordion.Item>\n        </Accordion>\n      </div>\n    </>\n  );\n}\n\nexport default FanQuiz;\n"],"names":["Leaderboard","allScores","setAllScores","useState","scores","setScores","currentUser","useAuthState","auth","loading","setLoading","pageSize","setPageSize","currentPage","setCurrentPage","useEffect","scoresCollection","collection","db","q","query","orderBy","unsubscribe","onSnapshot","querySnapshot","fetchedScores","docs","map","doc","id","data","error","console","startIndex","endIndex","slice","totalPages","Math","ceil","length","getRankClass","index","globalIndex","_jsxs","className","children","Form","Group","controlId","_jsx","Label","Control","as","value","onChange","e","Number","target","Table","striped","bordered","hover","responsive","variant","colSpan","score","_score$createdAt","userId","uid","FaTrophy","userName","Date","createdAt","toDate","toLocaleDateString","Button","onClick","handlePrevPage","prev","disabled","handleNextPage","getRandomQuestions","allQuestions","num","arguments","undefined","sort","random","_questions$currentQue","_questions$currentQue2","masterQuestions","setMasterQuestions","questions","setQuestions","currentQuestion","setCurrentQuestion","setScore","showScore","setShowScore","setError","userAnswers","setUserAnswers","user","async","fetchedQuestions","getDocs","err","fetchQuestions","isAnonymous","addDoc","displayName","serverTimestamp","saveScore","checkAndUnlockAchievements","useCallback","userAchievementsRef","userAchievementsSnap","getDoc","userAchievements","exists","firstPerfectScore","setDoc","firstPerfectScoreDate","merge","alert","firstAllWrong","firstAllWrongDate","resetQuiz","generateShareContent","shareText","shareUrl","window","location","href","ogImageUrl","_Fragment","Helmet","property","content","name","Spinner","animation","Alert","style","fontSize","handleShareLink","fullShareLink","navigator","clipboard","writeText","then","catch","FiLink","FiRefreshCcw","handleShareLine","lineShareUrl","encodeURIComponent","open","FaLine","item","question","color","isCorrect","userAnswer","correctAnswer","options","option","selectedOption","currentQ","answer","prevAnswers","nextQuestion","handleAnswerOptionClick","Accordion","defaultActiveKey","Item","eventKey","Header","Body"],"sourceRoot":""}