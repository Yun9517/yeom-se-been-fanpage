{"version":3,"file":"static/js/325.798e8c44.chunk.js","mappings":"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","sources":["hooks/useFirestoreCollection.js","components/ChatRoom.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { collection, query, getDocs, onSnapshot } from 'firebase/firestore';\nimport { db } from '../firebase'; // 假設你的 firebase.js 導出了 db\n\nconst useFirestoreCollection = (collectionName, queryConstraints = [], liveUpdate = false) => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    setError(null); // Clear previous errors\n\n    const collectionRef = collection(db, collectionName);\n    let q = query(collectionRef, ...queryConstraints); // 應用傳入的查詢約束\n\n    const fetchData = async () => {\n      try {\n        const querySnapshot = await getDocs(q);\n        const fetchedData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setData(fetchedData);\n        console.log(`useFirestoreCollection: Fetched data from ${collectionName}.`);\n      } catch (err) {\n        console.error(`useFirestoreCollection: Error fetching data from ${collectionName}:`, err);\n        setError(`無法載入 ${collectionName} 資料，請稍後再試。`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    const setupLiveListener = () => {\n      const unsubscribe = onSnapshot(q, (querySnapshot) => {\n        const fetchedData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setData(fetchedData);\n        setLoading(false);\n        setError(null);\n        console.log(`useFirestoreCollection: Live update from ${collectionName}.`);\n      }, (err) => {\n        console.error(`useFirestoreCollection: Live update error for ${collectionName}:`, err);\n        setError(`即時更新 ${collectionName} 資料失敗。`);\n        setLoading(false);\n      });\n      return unsubscribe;\n    };\n\n    let unsubscribe = null;\n    if (liveUpdate) {\n      unsubscribe = setupLiveListener();\n    } else {\n      fetchData();\n    }\n\n    // Cleanup function for useEffect\n    return () => {\n      if (unsubscribe) {\n        unsubscribe(); // Unsubscribe from live listener if it was set up\n      }\n    };\n  }, [collectionName, queryConstraints, liveUpdate]); // 依賴項，當這些改變時重新執行 effect\n\n  return { data, loading, error };\n};\n\nexport default useFirestoreCollection;\n","import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport { Container, Form, Button, ListGroup, Spinner, Alert } from 'react-bootstrap';\nimport EmojiPicker from 'emoji-picker-react';\nimport { useUser } from '../context/UserContext';\nimport useFirestoreCollection from '../hooks/useFirestoreCollection';\nimport { collection, addDoc, serverTimestamp, orderBy, limit } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport './ChatRoom.css';\n\nconst ChatRoom = () => {\n  const { user } = useUser();\n  const [newMessage, setNewMessage] = useState('');\n  const [showPicker, setShowPicker] = useState(false);\n  const messagesEndRef = useRef(null);\n  const messagesAreaRef = useRef(null); // Ref for the messages container\n\n  const messagesQueryConstraints = useMemo(() => [orderBy('createdAt'), limit(100)], []);\n  const { data: messages, loading, error } = useFirestoreCollection('messages', messagesQueryConstraints, true);\n\n  const onEmojiClick = (emojiObject) => {\n    setNewMessage(prevInput => prevInput + emojiObject.emoji);\n    setShowPicker(false);\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Effect to scroll the message area to the top on initial load\n  useEffect(() => {\n    if (messagesAreaRef.current) {\n      messagesAreaRef.current.scrollTop = 0;\n    }\n  }, []);\n\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n    if (newMessage.trim() === '' || !user) return;\n\n    try {\n      await addDoc(collection(db, 'messages'), {\n        text: newMessage,\n        createdAt: serverTimestamp(),\n        userId: user.uid,\n        userName: user.displayName || '匿名用戶',\n      });\n      setNewMessage('');\n    } catch (err) {\n      console.error(\"Error sending message:\", err);\n    }\n  };\n\n  if (!user) {\n    return (\n      <Container className=\"mt-5\">\n        <Alert variant=\"warning\">請先登入才能使用聊天室。</Alert>\n      </Container>\n    );\n  }\n\n  return (\n    <Container className=\"mt-5 chat-container\">\n      <h2 className=\"mb-4\">粉絲聊天室</h2>\n      <div className=\"messages-area\" ref={messagesAreaRef}>\n        {loading && <Spinner animation=\"border\" />}\n        {error && <Alert variant=\"danger\">無法載入訊息：{error.message}</Alert>}\n        <ListGroup>\n          {messages.map((msg) => (\n            <ListGroup.Item\n              key={msg.id}\n              className={`message-item ${msg.userId === user.uid ? 'sent' : 'received'}`}\n            >\n              <div className=\"message-content\">\n                <strong className=\"message-user\">{msg.userName}</strong>\n                <div className=\"message-text\">{msg.text}</div>\n                <small className=\"message-time\">\n                  {msg.createdAt?.toDate().toLocaleTimeString()}\n                </small>\n              </div>\n            </ListGroup.Item>\n          ))}\n          <div ref={messagesEndRef} />\n        </ListGroup>\n      </div>\n      <div className=\"picker-container\">\n        {showPicker && <EmojiPicker onEmojiClick={onEmojiClick} />}\n      </div>\n      <Form onSubmit={handleSendMessage} className=\"message-form\">\n        <Form.Control\n          type=\"text\"\n          value={newMessage}\n          onChange={(e) => setNewMessage(e.target.value)}\n          placeholder=\"輸入訊息...\"\n          autoComplete=\"off\"\n        />\n        <Button variant=\"light\" onClick={() => setShowPicker(val => !val)} className=\"emoji-button\">😊</Button>\n        <Button variant=\"primary\" type=\"submit\" className=\"btn-theme-gradient\">\n          傳送\n        </Button>\n      </Form>\n    </Container>\n  );\n};\n\nexport default ChatRoom;\n"],"names":["collectionName","queryConstraints","arguments","length","undefined","liveUpdate","data","setData","useState","loading","setLoading","error","setError","useEffect","collectionRef","collection","db","q","query","unsubscribe","onSnapshot","querySnapshot","fetchedData","docs","map","doc","id","console","log","err","async","getDocs","fetchData","ChatRoom","user","useUser","newMessage","setNewMessage","showPicker","setShowPicker","messagesEndRef","useRef","messagesAreaRef","messagesQueryConstraints","useMemo","orderBy","limit","messages","useFirestoreCollection","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","scrollTop","_jsxs","Container","className","children","_jsx","ref","Spinner","animation","Alert","variant","message","ListGroup","msg","_msg$createdAt","Item","userId","uid","userName","text","createdAt","toDate","toLocaleTimeString","EmojiPicker","onEmojiClick","emojiObject","prevInput","emoji","Form","onSubmit","e","preventDefault","trim","addDoc","serverTimestamp","displayName","Control","type","value","onChange","target","placeholder","autoComplete","Button","onClick","val"],"sourceRoot":""}