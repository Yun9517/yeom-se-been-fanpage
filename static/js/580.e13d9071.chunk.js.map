{"version":3,"file":"static/js/580.e13d9071.chunk.js","mappings":"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","sources":["hooks/useFirestoreCollection.js","components/Leaderboard.js","components/FanQuiz.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { collection, query, getDocs, onSnapshot } from 'firebase/firestore';\nimport { db } from '../firebase'; // 假設你的 firebase.js 導出了 db\n\nconst useFirestoreCollection = (collectionName, queryConstraints = [], liveUpdate = false) => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    setError(null); // Clear previous errors\n\n    const collectionRef = collection(db, collectionName);\n    let q = query(collectionRef, ...queryConstraints); // 應用傳入的查詢約束\n\n    const fetchData = async () => {\n      try {\n        const querySnapshot = await getDocs(q);\n        const fetchedData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setData(fetchedData);\n        console.log(`useFirestoreCollection: Fetched data from ${collectionName}.`);\n      } catch (err) {\n        console.error(`useFirestoreCollection: Error fetching data from ${collectionName}:`, err);\n        setError(`無法載入 ${collectionName} 資料，請稍後再試。`);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    const setupLiveListener = () => {\n      const unsubscribe = onSnapshot(q, (querySnapshot) => {\n        const fetchedData = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setData(fetchedData);\n        setLoading(false);\n        setError(null);\n        console.log(`useFirestoreCollection: Live update from ${collectionName}.`);\n      }, (err) => {\n        console.error(`useFirestoreCollection: Live update error for ${collectionName}:`, err);\n        setError(`即時更新 ${collectionName} 資料失敗。`);\n        setLoading(false);\n      });\n      return unsubscribe;\n    };\n\n    let unsubscribe = null;\n    if (liveUpdate) {\n      unsubscribe = setupLiveListener();\n    } else {\n      fetchData();\n    }\n\n    // Cleanup function for useEffect\n    return () => {\n      if (unsubscribe) {\n        unsubscribe(); // Unsubscribe from live listener if it was set up\n      }\n    };\n  }, [collectionName, queryConstraints, liveUpdate]); // 依賴項，當這些改變時重新執行 effect\n\n  return { data, loading, error };\n};\n\nexport default useFirestoreCollection;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { auth } from '../firebase';\nimport { orderBy } from 'firebase/firestore';\nimport { Table, Button, Dropdown } from 'react-bootstrap';\nimport { FaTrophy } from 'react-icons/fa';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport './Leaderboard.css';\n\nimport LoadingSpinner from './LoadingSpinner';\nimport useFirestoreCollection from '../hooks/useFirestoreCollection';\n\nconst Leaderboard = () => {\n  // eslint-disable-next-line no-unused-vars\n  const [currentUser] = useAuthState(auth);\n  const [pageSize, setPageSize] = useState(10); // User customizable page size\n  const [currentPage, setCurrentPage] = useState(1); // Current page number\n\n  const leaderboardQueryConstraints = useMemo(() => [\n    orderBy('score', 'desc')\n  ], []);\n\n  // eslint-disable-next-line no-unused-vars\n  const { data: allScores, loading, error } = useFirestoreCollection(\n    'scores',\n    leaderboardQueryConstraints,\n    true // Enable live updates for leaderboard\n  );\n\n  const [scores, setScores] = useState([]); // Scores for current page\n\n  useEffect(() => {\n    // Update scores for current page whenever allScores or pageSize changes\n    const startIndex = (currentPage - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    setScores(allScores.slice(startIndex, endIndex));\n  }, [allScores, currentPage, pageSize]);\n\n  const totalPages = Math.ceil(allScores.length / pageSize);\n\n  const handleNextPage = () => {\n    if (currentPage < totalPages) {\n      setCurrentPage(prev => prev + 1);\n    }\n  };\n\n  const handlePrevPage = () => {\n    if (currentPage > 1) {\n      setCurrentPage(prev => prev - 1);\n    }\n  };\n\n  \n\n  const getRankClass = (index) => {\n    // Adjust index for current page\n    const globalIndex = (currentPage - 1) * pageSize + index;\n    if (globalIndex === 0) return 'rank-gold';\n    if (globalIndex === 1) return 'rank-silver';\n    if (globalIndex === 2) return 'rank-bronze';\n    return '';\n  };\n\n  return (\n    <div className=\"leaderboard-container mt-5\">\n      {/* Header Section with Title and Page Size Selector */}\n      <div className=\"d-flex justify-content-between align-items-center mb-3\">\n        <h2 className=\"leaderboard-title mb-0\">排行榜</h2>\n        <Dropdown>\n          <Dropdown.Toggle id=\"dropdown-pagesize\" size=\"sm\" className=\"btn-theme-gradient\">\n            每頁 {pageSize} 筆\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            <Dropdown.Item onClick={() => setPageSize(10)}>10</Dropdown.Item>\n            <Dropdown.Item onClick={() => setPageSize(20)}>20</Dropdown.Item>\n            <Dropdown.Item onClick={() => setPageSize(50)}>50</Dropdown.Item>\n            <Dropdown.Item onClick={() => setPageSize(100)}>100</Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </div>\n\n      {/* Leaderboard Table */}\n      <Table striped bordered responsive variant=\"dark\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>玩家</th>\n            <th>分數</th>\n            <th>日期</th>\n          </tr>\n        </thead>\n        <tbody>\n          {loading ? (\n            <tr>\n              <td colSpan=\"4\" className=\"text-center\">\n                <LoadingSpinner loading={loading} />\n              </td>\n            </tr>\n          ) : (\n            scores.map((score, index) => (\n              <tr\n                key={score.id}\n                className={`${getRankClass( (currentPage - 1) * pageSize + index )} ${currentUser && score.userId === currentUser.uid ? 'current-user-row' : ''}`}\n              >\n                <td className=\"rank-cell\">\n                  {(currentPage - 1) * pageSize + index + 1 <= 3 ? (\n                    <FaTrophy className=\"trophy-icon\" />\n                  ) : (\n                    (currentPage - 1) * pageSize + index + 1\n                  )}\n                </td>\n                <td>{score.userName}</td>\n                <td>{score.score}</td>\n                <td>{new Date(score.createdAt?.toDate()).toLocaleDateString()}</td>\n              </tr>\n            ))\n          )}\n        </tbody>\n      </Table>\n      <div className=\"d-flex justify-content-between mt-3\">\n        {currentPage > 1 && (\n          <Button onClick={handlePrevPage} disabled={loading} variant=\"secondary\">上一頁</Button>\n        )}\n        {currentPage < totalPages && (\n          <Button onClick={handleNextPage} disabled={loading} variant=\"secondary\" className=\"ms-auto\">下一頁</Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Leaderboard;","import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { FiRefreshCcw, FiLink } from 'react-icons/fi';\r\nimport { FaLine } from 'react-icons/fa';\r\nimport { Alert, Accordion, Toast, ToastContainer, Button } from 'react-bootstrap';\r\nimport './FanQuiz.css';\r\n\r\nimport { db, auth } from '../firebase';\r\nimport { collection, addDoc, serverTimestamp, setDoc, doc, getDoc, increment } from 'firebase/firestore';\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\n\r\nimport Leaderboard from './Leaderboard';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport useFirestoreCollection from '../hooks/useFirestoreCollection';\r\nimport { achievementsList, pointRules } from '../data/achievements';\r\n\r\n// Helper function to get random questions\r\nconst getRandomQuestions = (allQuestions, num = 5) => {\r\n  const shuffled = [...allQuestions].sort(() => 0.5 - Math.random());\r\n  return shuffled.slice(0, num);\r\n};\r\n\r\nfunction FanQuiz() {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [showScore, setShowScore] = useState(false);\r\n  const [userAnswers, setUserAnswers] = useState([]);\r\n  const [user] = useAuthState(auth);\r\n  const [showToast, setShowToast] = useState(false);\r\n  const [toastMessage, setToastMessage] = useState('');\r\n  const [toastVariant, setToastVariant] = useState('success');\r\n\r\n  const quizQueryConstraints = useMemo(() => [], []); // No specific order for initial fetch, will be shuffled anyway\r\n  const { data: masterQuestions, loading, error } = useFirestoreCollection('quizzes', quizQueryConstraints);\r\n\r\n  useEffect(() => {\r\n    if (!loading && !error && masterQuestions.length > 0) {\r\n      setQuestions(getRandomQuestions(masterQuestions));\r\n    }\r\n  }, [masterQuestions, loading, error]);\r\n\r\n  useEffect(() => {\r\n    const saveScore = async () => {\r\n      if (showScore && user && !user.isAnonymous) { // Only save score if user is logged in and not anonymous\r\n        try {\r\n          await addDoc(collection(db, \"scores\"), {\r\n            userName: user.displayName,\r\n            userId: user.uid,\r\n            score: score,\r\n            userAnswers: userAnswers, // Add userAnswers here\r\n            createdAt: serverTimestamp()\r\n          });\r\n        } catch (e) {\r\n          console.error(\"Error adding document: \", e);\r\n        }\r\n      }\r\n    };\r\n\r\n    saveScore();\r\n  }, [showScore, user, score, userAnswers]);\r\n\r\n  const checkAndUnlockAchievements = useCallback(async () => {\r\n    if (!user || user.isAnonymous) return; // Only check for logged-in users\r\n\r\n    const userAchievementsRef = doc(db, \"userAchievements\", user.uid);\r\n    const userAchievementsSnap = await getDoc(userAchievementsRef);\r\n    const userAchievements = userAchievementsSnap.exists() ? userAchievementsSnap.data() : {};\r\n\r\n    const achievementData = {\r\n      userName: user.displayName,\r\n      userEmail: user.email,\r\n    };\r\n\r\n    const grantAchievement = async (achievementId) => {\r\n        const achievement = achievementsList.find(a => a.id === achievementId);\r\n        if (!achievement) return;\r\n\r\n        const pointsGained = pointRules.oneTime[achievement.tier] || 0;\r\n        \r\n        await setDoc(userAchievementsRef, {\r\n            ...achievementData,\r\n            [achievementId]: true,\r\n            [`${achievementId}Date`]: serverTimestamp(),\r\n            points: increment(pointsGained)\r\n        }, { merge: true });\r\n\r\n        showAchievementToast(`恭喜！您解鎖了 [${achievement.name}] 成就！獲得 ${pointsGained} 點！`);\r\n    };\r\n\r\n    // Achievement: 首次作答全對\r\n    if (score === questions.length && !userAchievements.firstPerfectScore) {\r\n      await grantAchievement('firstPerfectScore');\r\n    }\r\n\r\n    // Achievement: 首次全錯\r\n    if (score === 0 && !userAchievements.firstAllWrong) {\r\n      await grantAchievement('firstAllWrong');\r\n    }\r\n\r\n    // Login Achievements\r\n    const loginDaysCount = userAchievements.loginDaysCount || 0;\r\n\r\n    if (loginDaysCount >= 1 && !userAchievements.firstLogin) {\r\n      await grantAchievement('firstLogin');\r\n    }\r\n\r\n    if (loginDaysCount >= 3 && !userAchievements.threeDayLogin) {\r\n      await grantAchievement('threeDayLogin');\r\n    }\r\n\r\n    if (loginDaysCount >= 7 && !userAchievements.sevenDayLogin) {\r\n      await grantAchievement('sevenDayLogin');\r\n    }\r\n\r\n    if (loginDaysCount >= 30 && !userAchievements.thirtyDayLogin) {\r\n      await grantAchievement('thirtyDayLogin');\r\n    }\r\n\r\n    // Quizzes Answered Achievements\r\n    const totalQuizzesAnswered = userAchievements.totalQuizzesAnswered || 0;\r\n    const totalCorrectAnswers = userAchievements.totalCorrectAnswers || 0;\r\n    const totalIncorrectAnswers = userAchievements.totalIncorrectAnswers || 0;\r\n\r\n    if (totalCorrectAnswers >= 10 && !userAchievements.tenCorrectAnswers) {\r\n      await grantAchievement('tenCorrectAnswers');\r\n    }\r\n\r\n    if (totalCorrectAnswers >= 50 && !userAchievements.fiftyCorrectAnswers) {\r\n      await grantAchievement('fiftyCorrectAnswers');\r\n    }\r\n\r\n    if (totalCorrectAnswers >= 100 && !userAchievements.hundredCorrectAnswers) {\r\n      await grantAchievement('hundredCorrectAnswers');\r\n    }\r\n\r\n    if (totalIncorrectAnswers >= 10 && !userAchievements.tenIncorrectAnswers) {\r\n      await grantAchievement('tenIncorrectAnswers');\r\n    }\r\n\r\n    if (totalIncorrectAnswers >= 50 && !userAchievements.fiftyIncorrectAnswers) {\r\n      await grantAchievement('fiftyIncorrectAnswers');\r\n    }\r\n\r\n    if (totalIncorrectAnswers >= 100 && !userAchievements.hundredIncorrectAnswers) {\r\n      await grantAchievement('hundredIncorrectAnswers');\r\n    }\r\n\r\n    if (totalQuizzesAnswered >= 100 && !userAchievements.hundredQuizzes) {\r\n      await grantAchievement('hundredQuizzes');\r\n    }\r\n\r\n    if (totalQuizzesAnswered >= 500 && !userAchievements.fiveHundredQuizzes) {\r\n      await grantAchievement('fiveHundredQuizzes');\r\n    }\r\n\r\n    if (totalQuizzesAnswered >= 1000 && !userAchievements.thousandQuizzes) {\r\n      await grantAchievement('thousandQuizzes');\r\n    }\r\n\r\n  }, [user, score, questions.length]);\r\n\r\n  const showAchievementToast = (message, variant = 'success') => {\r\n    setToastMessage(message);\r\n    setToastVariant(variant);\r\n    setShowToast(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (showScore && user && !user.isAnonymous) {\r\n      checkAndUnlockAchievements();\r\n    }\r\n  }, [showScore, user, checkAndUnlockAchievements]);\r\n\r\n  const handleAnswerOptionClick = (selectedOption) => {\r\n    const currentQ = questions[currentQuestion];\r\n    const isCorrect = selectedOption === currentQ.answer;\r\n\r\n    if (isCorrect) {\r\n      setScore(score + 1);\r\n    }\r\n\r\n    setUserAnswers(prevAnswers => [\r\n      ...prevAnswers,\r\n      {\r\n        question: currentQ.question,\r\n        correctAnswer: currentQ.answer,\r\n        userAnswer: selectedOption,\r\n        isCorrect: isCorrect,\r\n      },\r\n    ]);\r\n\r\n    const nextQuestion = currentQuestion + 1;\r\n    if (nextQuestion < questions.length) {\r\n      setCurrentQuestion(nextQuestion);\r\n    } else {\r\n      setShowScore(true);\r\n      // Increment totalQuizSessions and other stats when the quiz ends\r\n      if (user && !user.isAnonymous) {\r\n        const userAchievementsRef = doc(db, \"userAchievements\", user.uid);\r\n        const finalScore = isCorrect ? score + 1 : score; // Calculate final score for this quiz session\r\n        const updateData = {\r\n          totalQuizSessions: increment(1),\r\n          totalQuizzesAnswered: increment(questions.length),\r\n          totalCorrectAnswers: increment(finalScore),\r\n          totalIncorrectAnswers: increment(questions.length - finalScore),\r\n        };\r\n        setDoc(userAchievementsRef, updateData, { merge: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  const resetQuiz = useCallback(() => {\r\n    setCurrentQuestion(0);\r\n    setScore(0);\r\n    setShowScore(false);\r\n    setQuestions(getRandomQuestions(masterQuestions));\r\n    setUserAnswers([]);\r\n  }, [masterQuestions]);\r\n\r\n  const generateShareContent = () => {\r\n    const shareText = `我在 염세빈 粉絲小遊戲中獲得了 ${score} 分！快來挑戰看看你的分數！`;\r\n    const shareUrl = window.location.href;\r\n    return { shareText, shareUrl };\r\n  };\r\n\r\n  const handleShareLink = () => {\r\n    const { shareText, shareUrl } = generateShareContent();\r\n    const fullShareLink = `${shareText} ${shareUrl}`;\r\n    navigator.clipboard.writeText(fullShareLink).then(() => {\r\n      alert('分享連結已複製到剪貼簿！');\r\n    }).catch(err => {\r\n      console.error('無法複製分享連結:', err);\r\n    });\r\n  };\r\n\r\n  const handleShareLine = () => {\r\n    const { shareText, shareUrl } = generateShareContent();\r\n    const lineMessage = `${shareText} ${shareUrl}`;\r\n    const lineShareUrl = `https://line.me/R/msg/text/?${encodeURIComponent(lineMessage)}`;\r\n    window.open(lineShareUrl, '_blank');\r\n  };\r\n\r\n  const ogImageUrl = `yeomsebeen_field.jpg`;\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>염세빈 粉絲小遊戲！</title>\r\n        <meta property=\"og:title\" content=\"염세빈 粉絲小遊戲！\" />\r\n        <meta property=\"og:description\" content=\"快來挑戰看看你對廉世彬的了解程度！\" />\r\n        <meta property=\"og:image\" content={`https://storage.googleapis.com/yeom-se-been-fanpage-assets/${ogImageUrl}`} />\r\n        <meta property=\"og:url\" content={window.location.href} />\r\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n        <meta name=\"twitter:image\" content={`https://storage.googleapis.com/yeom-se-been-fanpage-assets/${ogImageUrl}`} />\r\n      </Helmet>\r\n      <ToastContainer position=\"top-end\" className=\"p-3\">\r\n        <Toast onClose={() => setShowToast(false)} show={showToast} bg={toastVariant}>\r\n          <Toast.Header>\r\n            <strong className=\"me-auto\">成就解鎖！</strong>\r\n          </Toast.Header>\r\n          <Toast.Body>{toastMessage}</Toast.Body>\r\n        </Toast>\r\n      </ToastContainer>\r\n      <div className=\"fan-quiz-container\">\r\n        <h2>염세彬 粉絲小遊戲！</h2>\r\n\r\n        {loading && <LoadingSpinner loading={loading} />}\r\n        {error && <Alert variant=\"danger\">{error}</Alert>}\r\n\r\n        {!loading && !error && (\r\n          showScore ? (\r\n            <div className=\"score-section\">\r\n              <div className=\"score-text\">你獲得了 {score} 分，總分 {questions.length} 分！</div>\r\n              {(!user || user.isAnonymous) && (\r\n                <Alert variant=\"info\" className=\"mt-3\" style={{ fontSize: '0.65em' }}>您的作答結果不會進入排行榜。如需記錄分數，請使用 Google 帳戶登入。</Alert>\r\n              )}\r\n              <div className=\"score-buttons\">\r\n                <button onClick={handleShareLink} className=\"quiz-button share-link-button\"><FiLink /></button>\r\n                <button onClick={resetQuiz} className=\"quiz-button play-again-button\"><FiRefreshCcw /></button>\r\n                <button onClick={handleShareLine} className=\"quiz-button share-line-button\"><FaLine /></button>\r\n              </div>\r\n\r\n              <div className=\"quiz-answers-summary mt-4\">\r\n                <h3>作答結果</h3>\r\n                {userAnswers.map((item, index) => (\r\n                  <div key={index} className=\"answer-item mb-3 p-3 border rounded\">\r\n                    <p><strong>問題 {index + 1}:</strong> {item.question}</p>\r\n                    <p><strong>你的答案:</strong> <span style={{ color: item.isCorrect ? '#28a745' : '#dc3545' }}>{item.userAnswer}</span></p>\r\n                    {!item.isCorrect && (\r\n                      <p><strong>正確答案:</strong> <span style={{ color: '#28a745' }}>{item.correctAnswer}</span></p>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            questions.length > 0 && (\r\n              <div className=\"question-section\">\r\n                <div className=\"question-count\">\r\n                  <span>問題 {currentQuestion + 1}</span>/{questions.length}\r\n                </div>\r\n                <div className=\"question-text\">\r\n                  {questions[currentQuestion]?.question}\r\n                </div>\r\n                <div className=\"answer-section\">\r\n                  {questions[currentQuestion]?.options.map((option, index) => (\r\n                    <Button\r\n                    key={index}\r\n                    onClick={() => handleAnswerOptionClick(option)}\r\n                    className=\"answer-btn btn-theme-gradient w-100 mb-2\"\r\n                    disabled={showScore} // Use showScore to disable button after quiz ends\r\n                  >\r\n                    {option}\r\n                  </Button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )\r\n          )\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"leaderboard-section mt-5\">\r\n        <Accordion defaultActiveKey=\"0\">\r\n          <Accordion.Item eventKey=\"0\">\r\n            <Accordion.Header>排行榜</Accordion.Header>\r\n            <Accordion.Body>\r\n              <Leaderboard />\r\n            </Accordion.Body>\r\n          </Accordion.Item>\r\n        </Accordion>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FanQuiz;"],"names":["collectionName","queryConstraints","arguments","length","undefined","liveUpdate","data","setData","useState","loading","setLoading","error","setError","useEffect","collectionRef","collection","db","q","query","unsubscribe","onSnapshot","querySnapshot","fetchedData","docs","map","doc","id","console","log","err","async","getDocs","fetchData","Leaderboard","currentUser","useAuthState","auth","pageSize","setPageSize","currentPage","setCurrentPage","leaderboardQueryConstraints","useMemo","orderBy","allScores","useFirestoreCollection","scores","setScores","startIndex","endIndex","slice","totalPages","Math","ceil","getRankClass","index","globalIndex","_jsxs","className","children","_jsx","Dropdown","Toggle","size","Menu","Item","onClick","Table","striped","bordered","responsive","variant","colSpan","LoadingSpinner","score","_score$createdAt","userId","uid","FaTrophy","userName","Date","createdAt","toDate","toLocaleDateString","Button","handlePrevPage","prev","disabled","handleNextPage","getRandomQuestions","allQuestions","num","sort","random","_questions$currentQue","_questions$currentQue2","questions","setQuestions","currentQuestion","setCurrentQuestion","setScore","showScore","setShowScore","userAnswers","setUserAnswers","user","showToast","setShowToast","toastMessage","setToastMessage","toastVariant","setToastVariant","quizQueryConstraints","masterQuestions","isAnonymous","addDoc","displayName","serverTimestamp","e","saveScore","checkAndUnlockAchievements","useCallback","userAchievementsRef","userAchievementsSnap","getDoc","userAchievements","exists","achievementData","userEmail","email","grantAchievement","achievement","achievementsList","find","a","achievementId","pointsGained","pointRules","oneTime","tier","setDoc","points","increment","merge","showAchievementToast","name","firstPerfectScore","firstAllWrong","loginDaysCount","firstLogin","threeDayLogin","sevenDayLogin","thirtyDayLogin","totalQuizzesAnswered","totalCorrectAnswers","totalIncorrectAnswers","tenCorrectAnswers","fiftyCorrectAnswers","hundredCorrectAnswers","tenIncorrectAnswers","fiftyIncorrectAnswers","hundredIncorrectAnswers","hundredQuizzes","fiveHundredQuizzes","thousandQuizzes","message","resetQuiz","generateShareContent","shareText","shareUrl","window","location","href","ogImageUrl","_Fragment","Helmet","property","content","ToastContainer","position","Toast","onClose","show","bg","Header","Body","Alert","style","fontSize","handleShareLink","fullShareLink","navigator","clipboard","writeText","then","alert","catch","FiLink","FiRefreshCcw","handleShareLine","lineShareUrl","encodeURIComponent","open","FaLine","item","question","color","isCorrect","userAnswer","correctAnswer","options","option","selectedOption","currentQ","answer","prevAnswers","nextQuestion","finalScore","updateData","totalQuizSessions","handleAnswerOptionClick","Accordion","defaultActiveKey","eventKey"],"sourceRoot":""}